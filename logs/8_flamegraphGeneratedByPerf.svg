<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="470.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="453" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="453" > </text>
<g id="frames">
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (460,636 samples, 0.88%)</title><rect x="474.1" y="293" width="10.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="477.12" y="303.5" ></text>
</g>
<g >
<title>MyString::operator&lt; (1,157,390 samples, 2.22%)</title><rect x="392.4" y="101" width="26.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="395.42" y="111.5" >M..</text>
</g>
<g >
<title>[unknown] (15,882,300 samples, 30.42%)</title><rect x="10.0" y="389" width="359.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >[unknown]</text>
</g>
<g >
<title>__sched_yield (1,193,581 samples, 2.29%)</title><rect x="1098.7" y="389" width="27.0" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1101.75" y="399.5" >_..</text>
</g>
<g >
<title>__lsan::CollectIgnoredCb (263,009 samples, 0.50%)</title><rect x="55.4" y="373" width="6.0" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="58.42" y="383.5" ></text>
</g>
<g >
<title>std::less&lt;MyString&gt;::operator (1,157,390 samples, 2.22%)</title><rect x="392.4" y="117" width="26.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="395.42" y="127.5" >s..</text>
</g>
<g >
<title>__sanitizer::internal_madvise (592,828 samples, 1.14%)</title><rect x="10.0" y="341" width="13.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (587,399 samples, 1.13%)</title><rect x="355.7" y="341" width="13.3" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="358.69" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (1,157,390 samples, 2.22%)</title><rect x="392.4" y="53" width="26.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="395.42" y="63.5" >s..</text>
</g>
<g >
<title>mmap64 (800,852 samples, 1.53%)</title><rect x="1155.9" y="373" width="18.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1158.92" y="383.5" ></text>
</g>
<g >
<title>do_lookup_x (854,787 samples, 1.64%)</title><rect x="336.4" y="373" width="19.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="339.37" y="383.5" ></text>
</g>
<g >
<title>MyStringTester::MyStringTester (482,469 samples, 0.92%)</title><rect x="418.6" y="181" width="10.9" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="421.58" y="191.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (482,469 samples, 0.92%)</title><rect x="418.6" y="117" width="10.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="421.58" y="127.5" ></text>
</g>
<g >
<title>__sanitizer::internal_mmap (1,709,949 samples, 3.28%)</title><rect x="1023.8" y="389" width="38.7" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1026.82" y="399.5" >__s..</text>
</g>
<g >
<title>__asan::Allocator::Allocate (459,083 samples, 0.88%)</title><rect x="369.0" y="389" width="10.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="371.96" y="399.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I__ZN7testing15AssertionResultC2ERKS0_ (460,978 samples, 0.88%)</title><rect x="484.5" y="373" width="10.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="487.53" y="383.5" ></text>
</g>
<g >
<title>testing::Test::Run (1,157,390 samples, 2.22%)</title><rect x="392.4" y="245" width="26.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="395.42" y="255.5" >t..</text>
</g>
<g >
<title>testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::TestFactoryBase, testing::Test*&gt; (482,469 samples, 0.92%)</title><rect x="418.6" y="245" width="10.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="421.58" y="255.5" ></text>
</g>
<g >
<title>__sanitizer::FlagHandler&lt;bool&gt;::Format (456,917 samples, 0.88%)</title><rect x="107.9" y="373" width="10.3" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="110.91" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;testing::TestEventListener*, std::allocator&lt;testing::TestEventListener*&gt; &gt;::push_back (460,316 samples, 0.88%)</title><rect x="463.7" y="213" width="10.4" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="466.72" y="223.5" ></text>
</g>
<g >
<title>_dl_map_object (1,133,123 samples, 2.17%)</title><rect x="1148.4" y="389" width="25.6" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1151.42" y="399.5" >_..</text>
</g>
<g >
<title>[unknown] (456,917 samples, 0.88%)</title><rect x="107.9" y="357" width="10.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="110.91" y="367.5" ></text>
</g>
<g >
<title>__asan_register_globals.part.0 (920,408 samples, 1.76%)</title><rect x="494.9" y="357" width="20.9" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="497.95" y="367.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt;::PopulateFreeList (2,752,863 samples, 5.27%)</title><rect x="810.2" y="389" width="62.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="813.18" y="399.5" >__sani..</text>
</g>
<g >
<title>testing::internal::GTestFlagSaver::GTestFlagSaver (482,469 samples, 0.92%)</title><rect x="418.6" y="149" width="10.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="421.58" y="159.5" ></text>
</g>
<g >
<title>testing::Message::GetString[abi:cxx11] (500,599 samples, 0.96%)</title><rect x="442.0" y="197" width="11.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="444.96" y="207.5" ></text>
</g>
<g >
<title>RUN_ALL_TESTS (3,154,600 samples, 6.04%)</title><rect x="392.4" y="357" width="71.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="395.42" y="367.5" >RUN_ALL_..</text>
</g>
<g >
<title>MyStringTester_countingUniqueWords_Test::TestBody (1,157,390 samples, 2.22%)</title><rect x="392.4" y="197" width="26.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="395.42" y="207.5" >M..</text>
</g>
<g >
<title>_dl_lookup_symbol_x (456,310 samples, 0.87%)</title><rect x="165.4" y="373" width="10.3" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="168.35" y="383.5" ></text>
</g>
<g >
<title>testing::TestEventListeners::SetDefaultResultPrinter (460,316 samples, 0.88%)</title><rect x="463.7" y="261" width="10.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="466.72" y="271.5" ></text>
</g>
<g >
<title>testing::TestInfo::Run (2,692,614 samples, 5.16%)</title><rect x="392.4" y="261" width="60.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="395.42" y="271.5" >testin..</text>
</g>
<g >
<title>__sanitizer::StackStore::Alloc (530,316 samples, 1.02%)</title><rect x="139.0" y="373" width="12.0" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="142.01" y="383.5" ></text>
</g>
<g >
<title>__sanitizer::internal_munmap (1,578,671 samples, 3.02%)</title><rect x="1062.5" y="389" width="35.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1065.47" y="399.5" >__s..</text>
</g>
<g >
<title>std::set&lt;MyString, std::less&lt;MyString&gt;, std::allocator&lt;MyString&gt; &gt;::insert (1,157,390 samples, 2.22%)</title><rect x="392.4" y="165" width="26.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="395.42" y="175.5" >s..</text>
</g>
<g >
<title>testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (3,154,600 samples, 6.04%)</title><rect x="392.4" y="309" width="71.3" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="395.42" y="319.5" >testing:..</text>
</g>
<g >
<title>testing::internal::UnitTestImpl::FilterTests (461,986 samples, 0.88%)</title><rect x="453.3" y="277" width="10.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="456.27" y="287.5" ></text>
</g>
<g >
<title>__sanitizer::internal_clone (10,074 samples, 0.02%)</title><rect x="1002.9" y="389" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1005.90" y="399.5" ></text>
</g>
<g >
<title>std::forward&lt;testing::TestEventListener* const&amp;&gt; (460,316 samples, 0.88%)</title><rect x="463.7" y="181" width="10.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="466.72" y="191.5" ></text>
</g>
<g >
<title>[unknown] (592,828 samples, 1.14%)</title><rect x="10.0" y="357" width="13.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>tests (52,209,253 samples, 100.00%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >tests</text>
</g>
<g >
<title>testing::internal::UnitTestImpl::RunAllTests (3,154,600 samples, 6.04%)</title><rect x="392.4" y="293" width="71.3" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="395.42" y="303.5" >testing:..</text>
</g>
<g >
<title>std::unique_ptr&lt;std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::default_delete&lt;std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::unique_ptr&lt;std::default_delete&lt;std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, void&gt; (552,156 samples, 1.06%)</title><rect x="429.5" y="197" width="12.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="432.48" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;testing::TestEventListener*, std::allocator&lt;testing::TestEventListener*&gt; &gt;::_M_realloc_insert&lt;testing::TestEventListener* const&amp;&gt; (460,316 samples, 0.88%)</title><rect x="463.7" y="197" width="10.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="466.72" y="207.5" ></text>
</g>
<g >
<title>[unknown] (2,009,406 samples, 3.85%)</title><rect x="10.0" y="373" width="45.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >[unk..</text>
</g>
<g >
<title>testing::internal::TestFactoryImpl&lt;MyStringTester_clear_expectedEmptyStringAfterClearing_Test&gt;::CreateTest (482,469 samples, 0.92%)</title><rect x="418.6" y="213" width="10.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="421.58" y="223.5" ></text>
</g>
<g >
<title>do_lookup_x (455,036 samples, 0.87%)</title><rect x="1175.6" y="389" width="10.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1178.56" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (482,469 samples, 0.92%)</title><rect x="418.6" y="133" width="10.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="421.58" y="143.5" ></text>
</g>
<g >
<title>__static_initialization_and_destruction_0 (460,978 samples, 0.88%)</title><rect x="484.5" y="357" width="10.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="487.53" y="367.5" ></text>
</g>
<g >
<title>testing::internal::PrettyUnitTestResultPrinter::OnTestEnd (1,052,755 samples, 2.02%)</title><rect x="429.5" y="229" width="23.8" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="432.48" y="239.5" >t..</text>
</g>
<g >
<title>testing::internal::StringStreamToString (500,599 samples, 0.96%)</title><rect x="442.0" y="181" width="11.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="444.96" y="191.5" ></text>
</g>
<g >
<title>testing::TestEventListeners::Append (460,316 samples, 0.88%)</title><rect x="463.7" y="245" width="10.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="466.72" y="255.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1,381,891 samples, 2.65%)</title><rect x="515.8" y="357" width="31.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="518.75" y="367.5" >__..</text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;::PopulateFreeArray (918,787 samples, 1.76%)</title><rect x="118.2" y="373" width="20.8" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="121.24" y="383.5" ></text>
</g>
<g >
<title>testing::UnitTest::UnitTest (460,316 samples, 0.88%)</title><rect x="463.7" y="293" width="10.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="466.72" y="303.5" ></text>
</g>
<g >
<title>_dl_load_cache_lookup (332,271 samples, 0.64%)</title><rect x="1148.4" y="373" width="7.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1151.42" y="383.5" ></text>
</g>
<g >
<title>main (3,154,600 samples, 6.04%)</title><rect x="392.4" y="373" width="71.3" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="395.42" y="383.5" >main</text>
</g>
<g >
<title>__sanitizer::internal_memset (915,632 samples, 1.75%)</title><rect x="1003.1" y="389" width="20.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1006.13" y="399.5" ></text>
</g>
<g >
<title>__sanitizer::internal_prctl (26,628 samples, 0.05%)</title><rect x="1098.1" y="389" width="0.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1101.15" y="399.5" ></text>
</g>
<g >
<title>testing::UnitTest::GetInstance (460,316 samples, 0.88%)</title><rect x="463.7" y="309" width="10.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="466.72" y="319.5" ></text>
</g>
<g >
<title>testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (3,154,600 samples, 6.04%)</title><rect x="392.4" y="325" width="71.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="395.42" y="335.5" >testing:..</text>
</g>
<g >
<title>testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (1,157,390 samples, 2.22%)</title><rect x="392.4" y="213" width="26.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="395.42" y="223.5" >t..</text>
</g>
<g >
<title>_dl_lookup_symbol_x (439,644 samples, 0.84%)</title><rect x="45.5" y="357" width="9.9" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="48.48" y="367.5" ></text>
</g>
<g >
<title>testing::internal::StringFromGTestEnv (460,978 samples, 0.88%)</title><rect x="484.5" y="341" width="10.4" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="487.53" y="351.5" ></text>
</g>
<g >
<title>__libc_start_main@@GLIBC_2.34 (3,684,229 samples, 7.06%)</title><rect x="463.7" y="389" width="83.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="466.72" y="399.5" >__libc_st..</text>
</g>
<g >
<title>testing::internal::ToUpper (460,978 samples, 0.88%)</title><rect x="484.5" y="309" width="10.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="487.53" y="319.5" ></text>
</g>
<g >
<title>_sub_I_00099_1 (2,302,299 samples, 4.41%)</title><rect x="494.9" y="373" width="52.1" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="497.95" y="383.5" >_sub_..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (1,157,390 samples, 2.22%)</title><rect x="392.4" y="69" width="26.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="395.42" y="79.5" >s..</text>
</g>
<g >
<title>_dl_sysdep_start (6,649,021 samples, 12.74%)</title><rect x="186.1" y="373" width="150.3" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="189.09" y="383.5" >_dl_sysdep_start</text>
</g>
<g >
<title>__sanitizer::ThreadLister::ListThreads (174,777 samples, 0.33%)</title><rect x="151.0" y="373" width="3.9" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="153.99" y="383.5" ></text>
</g>
<g >
<title>testing::internal::TestEventRepeater::Append (460,316 samples, 0.88%)</title><rect x="463.7" y="229" width="10.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="466.72" y="239.5" ></text>
</g>
<g >
<title>__lsan::PointsIntoChunk (1,532,287 samples, 2.93%)</title><rect x="557.2" y="389" width="34.6" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="560.20" y="399.5" >__..</text>
</g>
<g >
<title>__ubsan::checkDynamicType (1,003,898 samples, 1.92%)</title><rect x="1125.7" y="389" width="22.7" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1128.73" y="399.5" >_..</text>
</g>
<g >
<title>MyString::toString[abi:cxx11] (1,157,390 samples, 2.22%)</title><rect x="392.4" y="85" width="26.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="395.42" y="95.5" >M..</text>
</g>
<g >
<title>__sanitizer::internal_read (460,613 samples, 0.88%)</title><rect x="154.9" y="373" width="10.5" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="157.94" y="383.5" ></text>
</g>
<g >
<title>testing::internal::MakeAndRegisterTestInfo (920,952 samples, 1.76%)</title><rect x="463.7" y="341" width="20.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="466.72" y="351.5" ></text>
</g>
<g >
<title>testing::TestSuite::should_run (461,986 samples, 0.88%)</title><rect x="453.3" y="261" width="10.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="456.27" y="271.5" ></text>
</g>
<g >
<title>__sanitizer::DTLS_on_tls_get_addr (516,523 samples, 0.99%)</title><rect x="33.8" y="357" width="11.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="36.80" y="367.5" ></text>
</g>
<g >
<title>__lsan::LsanMetadata::LsanMetadata (452,151 samples, 0.87%)</title><rect x="547.0" y="389" width="10.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="549.98" y="399.5" ></text>
</g>
<g >
<title>testing::internal::GetUnitTestImpl (460,316 samples, 0.88%)</title><rect x="463.7" y="325" width="10.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="466.72" y="335.5" ></text>
</g>
<g >
<title>__lsan::GetUserBegin (1,598,198 samples, 3.06%)</title><rect x="61.4" y="373" width="36.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="64.36" y="383.5" >__l..</text>
</g>
<g >
<title>testing::internal::FlagToEnvVar (460,978 samples, 0.88%)</title><rect x="484.5" y="325" width="10.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="487.53" y="335.5" ></text>
</g>
<g >
<title>all (52,209,253 samples, 100%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>__sanitizer::internal_read (456,917 samples, 0.88%)</title><rect x="107.9" y="341" width="10.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="110.91" y="351.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (5,773,964 samples, 11.06%)</title><rect x="872.4" y="389" width="130.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="875.40" y="399.5" >__sanitizer::Sta..</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (461,611 samples, 0.88%)</title><rect x="97.5" y="373" width="10.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="100.48" y="383.5" ></text>
</g>
<g >
<title>__lsan::ScanRangeForPointers (9,660,692 samples, 18.50%)</title><rect x="591.8" y="389" width="218.4" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="594.84" y="399.5" >__lsan::ScanRangeForPointers</text>
</g>
<g >
<title>std::default_delete&lt;std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (587,399 samples, 1.13%)</title><rect x="355.7" y="373" width="13.3" height="15.0" fill="rgb(225,96,22)" rx="2" ry="2" />
<text  x="358.69" y="383.5" ></text>
</g>
<g >
<title>dl_main (6,649,021 samples, 12.74%)</title><rect x="186.1" y="357" width="150.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="189.09" y="367.5" >dl_main</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (500,599 samples, 0.96%)</title><rect x="442.0" y="165" width="11.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="444.96" y="175.5" ></text>
</g>
<g >
<title>_dl_relocate_object (6,649,021 samples, 12.74%)</title><rect x="186.1" y="341" width="150.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="189.09" y="351.5" >_dl_relocate_object</text>
</g>
<g >
<title>[unknown] (587,399 samples, 1.13%)</title><rect x="355.7" y="357" width="13.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="358.69" y="367.5" ></text>
</g>
<g >
<title>testing::internal::StreamableToString&lt;long&gt; (1,052,755 samples, 2.02%)</title><rect x="429.5" y="213" width="23.8" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="432.48" y="223.5" >t..</text>
</g>
<g >
<title>testing::TestSuite::Run (2,692,614 samples, 5.16%)</title><rect x="392.4" y="277" width="60.9" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="395.42" y="287.5" >testin..</text>
</g>
<g >
<title>_start (67,765 samples, 0.13%)</title><rect x="1174.0" y="389" width="1.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1177.03" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int&gt; (460,636 samples, 0.88%)</title><rect x="474.1" y="261" width="10.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="477.12" y="271.5" ></text>
</g>
<g >
<title>__libc_start_call_main (3,154,600 samples, 6.04%)</title><rect x="392.4" y="389" width="71.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="395.42" y="399.5" >__libc_s..</text>
</g>
<g >
<title>testing::internal::UnitTestImpl::UnitTestImpl (460,316 samples, 0.88%)</title><rect x="463.7" y="277" width="10.4" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="466.72" y="287.5" ></text>
</g>
<g >
<title>testing::internal::TestEventRepeater::OnTestEnd (1,052,755 samples, 2.02%)</title><rect x="429.5" y="245" width="23.8" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="432.48" y="255.5" >t..</text>
</g>
<g >
<title>__static_initialization_and_destruction_0 (920,952 samples, 1.76%)</title><rect x="463.7" y="357" width="20.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="466.72" y="367.5" ></text>
</g>
<g >
<title>testing::Test::Test (482,469 samples, 0.92%)</title><rect x="418.6" y="165" width="10.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="421.58" y="175.5" ></text>
</g>
<g >
<title>testing::TestSuite::AddTestInfo (460,636 samples, 0.88%)</title><rect x="474.1" y="309" width="10.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="477.12" y="319.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (460,411 samples, 0.88%)</title><rect x="23.4" y="357" width="10.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="26.40" y="367.5" ></text>
</g>
<g >
<title>testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::TestFactoryBase, testing::Test*&gt; (482,469 samples, 0.92%)</title><rect x="418.6" y="229" width="10.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="421.58" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, MyString, std::_Identity&lt;MyString&gt;, std::less&lt;MyString&gt;, std::allocator&lt;MyString&gt; &gt;::_M_get_insert_unique_pos (1,157,390 samples, 2.22%)</title><rect x="392.4" y="133" width="26.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="395.42" y="143.5" >s..</text>
</g>
<g >
<title>testing::internal::UnitTestImpl::AddTestInfo (460,636 samples, 0.88%)</title><rect x="474.1" y="325" width="10.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="477.12" y="335.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::assign (1,157,390 samples, 2.22%)</title><rect x="392.4" y="37" width="26.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="395.42" y="47.5" >s..</text>
</g>
<g >
<title>_dl_sym (461,149 samples, 0.88%)</title><rect x="175.7" y="373" width="10.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="178.67" y="383.5" ></text>
</g>
<g >
<title>MyStringTester_clear_expectedEmptyStringAfterClearing_Test::MyStringTester_clear_expectedEmptyStringAfterClearing_Test (482,469 samples, 0.92%)</title><rect x="418.6" y="197" width="10.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="421.58" y="207.5" ></text>
</g>
<g >
<title>testing::UnitTest::Run (3,154,600 samples, 6.04%)</title><rect x="392.4" y="341" width="71.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="395.42" y="351.5" >testing:..</text>
</g>
<g >
<title>__asan_stack_malloc_2 (578,723 samples, 1.11%)</title><rect x="379.3" y="389" width="13.1" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="382.34" y="399.5" ></text>
</g>
<g >
<title>testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (1,157,390 samples, 2.22%)</title><rect x="392.4" y="229" width="26.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="395.42" y="239.5" >t..</text>
</g>
<g >
<title>_GLOBAL__sub_I__ZN62MyStringTester_emptyStringConstruction_expectedSizeIsZero_Test10test_info_E (920,952 samples, 1.76%)</title><rect x="463.7" y="373" width="20.8" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="466.72" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, MyString, std::_Identity&lt;MyString&gt;, std::less&lt;MyString&gt;, std::allocator&lt;MyString&gt; &gt;::_M_insert_unique&lt;MyString const&amp;&gt; (1,157,390 samples, 2.22%)</title><rect x="392.4" y="149" width="26.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="395.42" y="159.5" >s..</text>
</g>
<g >
<title>MyString::getUniqueWords (1,157,390 samples, 2.22%)</title><rect x="392.4" y="181" width="26.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="395.42" y="191.5" >M..</text>
</g>
<g >
<title>init_cpu_features.constprop.0 (184,004 samples, 0.35%)</title><rect x="1185.8" y="389" width="4.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1188.84" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (460,636 samples, 0.88%)</title><rect x="474.1" y="277" width="10.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="477.12" y="287.5" ></text>
</g>
</g>
</svg>
