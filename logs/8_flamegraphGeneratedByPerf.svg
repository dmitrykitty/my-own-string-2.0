<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="454.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="437" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="437" > </text>
<g id="frames">
<g >
<title>testing::UnitTest::UnitTest (609,647 samples, 0.91%)</title><rect x="648.8" y="293" width="10.8" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="651.79" y="303.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (609,345 samples, 0.91%)</title><rect x="616.5" y="181" width="10.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="619.45" y="191.5" ></text>
</g>
<g >
<title>__sanitizer::ThreadContextBase::OnJoined (609,402 samples, 0.91%)</title><rect x="212.9" y="357" width="10.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="215.92" y="367.5" ></text>
</g>
<g >
<title>[unknown] (611,299 samples, 0.92%)</title><rect x="42.1" y="341" width="10.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="45.08" y="351.5" ></text>
</g>
<g >
<title>strcmp (595,284 samples, 0.89%)</title><rect x="1179.5" y="373" width="10.5" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1182.47" y="383.5" ></text>
</g>
<g >
<title>testing::internal::(anonymous namespace)::PositiveAndNegativeUnitTestFilter::MatchesName (609,225 samples, 0.91%)</title><rect x="627.2" y="229" width="10.8" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="630.23" y="239.5" ></text>
</g>
<g >
<title>MyString::countWordsUsageIgnoringCases (1,829,767 samples, 2.74%)</title><rect x="530.1" y="165" width="32.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="533.08" y="175.5" >My..</text>
</g>
<g >
<title>MyStringTester_countingWordsNumbersInText_Test::TestBody (1,829,767 samples, 2.74%)</title><rect x="530.1" y="181" width="32.4" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="533.08" y="191.5" >My..</text>
</g>
<g >
<title>InitializeCommonInterceptors (598,059 samples, 0.90%)</title><rect x="31.5" y="357" width="10.6" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="34.50" y="367.5" ></text>
</g>
<g >
<title>testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (7,953,997 samples, 11.93%)</title><rect x="454.1" y="213" width="140.8" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="457.14" y="223.5" >testing::internal..</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1,217,737 samples, 1.83%)</title><rect x="169.8" y="357" width="21.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="172.81" y="367.5" >_..</text>
</g>
<g >
<title>testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::TestFactoryBase, testing::Test*&gt; (609,352 samples, 0.91%)</title><rect x="605.7" y="213" width="10.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="608.67" y="223.5" ></text>
</g>
<g >
<title>_dl_check_map_versions (568,375 samples, 0.85%)</title><rect x="234.4" y="357" width="10.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="237.44" y="367.5" ></text>
</g>
<g >
<title>std::any_of&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, testing::internal::(anonymous namespace)::UnitTestFilter::MatchesName (609,225 samples, 0.91%)</title><rect x="627.2" y="197" width="10.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="630.23" y="207.5" ></text>
</g>
<g >
<title>MyString::operator&lt;=&gt; (609,844 samples, 0.91%)</title><rect x="551.7" y="53" width="10.8" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="554.67" y="63.5" ></text>
</g>
<g >
<title>tolower (609,438 samples, 0.91%)</title><rect x="464.9" y="149" width="10.8" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="467.92" y="159.5" ></text>
</g>
<g >
<title>testing::internal::CountIf&lt;std::vector&lt;testing::TestSuite*, std::allocator&lt;testing::TestSuite*&gt; &gt;, bool  (609,345 samples, 0.91%)</title><rect x="616.5" y="197" width="10.7" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="619.45" y="207.5" ></text>
</g>
<g >
<title>std::less&lt;MyString&gt;::operator (609,844 samples, 0.91%)</title><rect x="551.7" y="69" width="10.8" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="554.67" y="79.5" ></text>
</g>
<g >
<title>__sanitizer::internal_munmap (1,700,939 samples, 2.55%)</title><rect x="1125.7" y="373" width="30.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1128.68" y="383.5" >__..</text>
</g>
<g >
<title>_sub_I_00099_1 (1,824,611 samples, 2.74%)</title><rect x="659.6" y="357" width="32.3" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="662.58" y="367.5" >_s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_M_lower_bound (614,164 samples, 0.92%)</title><rect x="519.2" y="85" width="10.9" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="522.22" y="95.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (1,223,070 samples, 1.83%)</title><rect x="52.9" y="341" width="21.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="55.90" y="351.5" >_..</text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_M_lower_bound (609,844 samples, 0.91%)</title><rect x="551.7" y="85" width="10.8" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="554.67" y="95.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::_S_nd&lt;unsigned long, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;, unsigned int&gt; (613,799 samples, 0.92%)</title><rect x="573.2" y="85" width="10.9" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="576.24" y="95.5" ></text>
</g>
<g >
<title>MyString::operator[] (615,764 samples, 0.92%)</title><rect x="486.6" y="133" width="10.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="489.57" y="143.5" ></text>
</g>
<g >
<title>__run_exit_handlers (148,748 samples, 0.22%)</title><rect x="912.0" y="373" width="2.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="915.03" y="383.5" ></text>
</g>
<g >
<title>__tls_get_addr (609,286 samples, 0.91%)</title><rect x="562.5" y="133" width="10.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="565.46" y="143.5" ></text>
</g>
<g >
<title>testing::internal::UnitTestImpl::test_suite_to_run_count (609,345 samples, 0.91%)</title><rect x="616.5" y="213" width="10.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="619.45" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (609,143 samples, 0.91%)</title><rect x="454.1" y="133" width="10.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="457.14" y="143.5" ></text>
</g>
<g >
<title>main (11,000,215 samples, 16.50%)</title><rect x="454.1" y="357" width="194.7" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="457.14" y="367.5" >main</text>
</g>
<g >
<title>operator new (609,352 samples, 0.91%)</title><rect x="605.7" y="181" width="10.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="608.67" y="191.5" ></text>
</g>
<g >
<title>testing::internal::MakeAndRegisterTestInfo (609,647 samples, 0.91%)</title><rect x="648.8" y="325" width="10.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="651.79" y="335.5" ></text>
</g>
<g >
<title>testing::internal::(anonymous namespace)::UnitTestFilter::MatchesName (609,225 samples, 0.91%)</title><rect x="627.2" y="213" width="10.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="630.23" y="223.5" ></text>
</g>
<g >
<title>__lsan::GetUserBegin (951,621 samples, 1.43%)</title><rect x="144.7" y="357" width="16.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="147.69" y="367.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (1,838,312 samples, 2.76%)</title><rect x="421.6" y="373" width="32.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="424.61" y="383.5" >__..</text>
</g>
<g >
<title>[unknown] (20,827,872 samples, 31.23%)</title><rect x="31.5" y="373" width="368.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="34.50" y="383.5" >[unknown]</text>
</g>
<g >
<title>MyString::countWordsUsageIgnoringCases (609,844 samples, 0.91%)</title><rect x="551.7" y="149" width="10.8" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="554.67" y="159.5" ></text>
</g>
<g >
<title>__sanitizer::internal_mmap (2,114,326 samples, 3.17%)</title><rect x="1088.3" y="373" width="37.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1091.27" y="383.5" >__s..</text>
</g>
<g >
<title>testing::TestInfo::Run (9,172,711 samples, 13.76%)</title><rect x="454.1" y="245" width="162.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="457.14" y="255.5" >testing::TestInfo::Run</text>
</g>
<g >
<title>[unknown] (608,852 samples, 0.91%)</title><rect x="378.6" y="341" width="10.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="381.56" y="351.5" ></text>
</g>
<g >
<title>__lsan::ForEachChunk (490,844 samples, 0.74%)</title><rect x="136.0" y="357" width="8.7" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="139.00" y="367.5" ></text>
</g>
<g >
<title>MyStringTester_trimming_expectedSpacesRemoved_Test::TestBody (609,351 samples, 0.91%)</title><rect x="584.1" y="181" width="10.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="587.10" y="191.5" ></text>
</g>
<g >
<title>__sanitizer::internal_memset (1,199,498 samples, 1.80%)</title><rect x="1067.0" y="373" width="21.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1070.04" y="383.5" ></text>
</g>
<g >
<title>GetInterceptorMetadata (609,480 samples, 0.91%)</title><rect x="10.0" y="373" width="10.8" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>MyStringTester_clear_expectedEmptyStringAfterClearing_Test::TestBody (609,143 samples, 0.91%)</title><rect x="454.1" y="181" width="10.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="457.14" y="191.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (609,402 samples, 0.91%)</title><rect x="212.9" y="309" width="10.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="215.92" y="319.5" ></text>
</g>
<g >
<title>MyString::generateRandomWord (613,799 samples, 0.92%)</title><rect x="573.2" y="165" width="10.9" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="576.24" y="175.5" ></text>
</g>
<g >
<title>MyString::trim (609,351 samples, 0.91%)</title><rect x="584.1" y="165" width="10.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="587.10" y="175.5" ></text>
</g>
<g >
<title>[unknown] (605,573 samples, 0.91%)</title><rect x="389.3" y="341" width="10.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="392.33" y="351.5" ></text>
</g>
<g >
<title>MyString::base_iterator&lt;false&gt;::operator* (1,219,923 samples, 1.83%)</title><rect x="530.1" y="149" width="21.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="533.08" y="159.5" >M..</text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (613,799 samples, 0.92%)</title><rect x="573.2" y="101" width="10.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="576.24" y="111.5" ></text>
</g>
<g >
<title>testing::internal::UnitTestImpl::RunAllTests (10,391,281 samples, 15.58%)</title><rect x="454.1" y="277" width="183.9" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="457.14" y="287.5" >testing::internal::Unit..</text>
</g>
<g >
<title>MyString::operator&lt;=&gt; (614,820 samples, 0.92%)</title><rect x="508.3" y="69" width="10.9" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="511.34" y="79.5" ></text>
</g>
<g >
<title>_fini (148,748 samples, 0.22%)</title><rect x="912.0" y="357" width="2.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="915.03" y="367.5" ></text>
</g>
<g >
<title>testing::InitGoogleTest (608,934 samples, 0.91%)</title><rect x="638.0" y="341" width="10.8" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="641.01" y="351.5" ></text>
</g>
<g >
<title>std::generate_n&lt;MyString::base_iterator&lt;false&gt;, unsigned long, makeRandomCharGenerator (613,799 samples, 0.92%)</title><rect x="573.2" y="149" width="10.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="576.24" y="159.5" ></text>
</g>
<g >
<title>MyString::base_iterator&lt;false&gt;::operator!= (614,205 samples, 0.92%)</title><rect x="475.7" y="165" width="10.9" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="478.70" y="175.5" ></text>
</g>
<g >
<title>__lsan::LsanMetadata::LsanMetadata (468,103 samples, 0.70%)</title><rect x="161.5" y="357" width="8.3" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="164.53" y="367.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (157,867 samples, 0.24%)</title><rect x="1175.9" y="373" width="2.8" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1178.88" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;MyString const&amp;&gt;, std::tuple&lt;&gt; &gt; (614,820 samples, 0.92%)</title><rect x="508.3" y="117" width="10.9" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="511.34" y="127.5" ></text>
</g>
<g >
<title>all (66,685,848 samples, 100%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::map&lt;MyString, unsigned long, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::lower_bound (609,844 samples, 0.91%)</title><rect x="551.7" y="117" width="10.8" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="554.67" y="127.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1,217,058 samples, 1.83%)</title><rect x="670.3" y="341" width="21.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="673.33" y="351.5" >_..</text>
</g>
<g >
<title>_start (44,614 samples, 0.07%)</title><rect x="1178.7" y="373" width="0.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1181.68" y="383.5" ></text>
</g>
<g >
<title>__asan_register_globals.part.0 (607,553 samples, 0.91%)</title><rect x="659.6" y="341" width="10.7" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="662.58" y="351.5" ></text>
</g>
<g >
<title>__static_initialization_and_destruction_0 (609,647 samples, 0.91%)</title><rect x="648.8" y="341" width="10.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="651.79" y="351.5" ></text>
</g>
<g >
<title>testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (10,391,281 samples, 15.58%)</title><rect x="454.1" y="309" width="183.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="457.14" y="319.5" >testing::internal::Hand..</text>
</g>
<g >
<title>__lsan::PointsIntoChunk (963,682 samples, 1.45%)</title><rect x="691.9" y="373" width="17.0" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="694.86" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::lower_bound (609,844 samples, 0.91%)</title><rect x="551.7" y="101" width="10.8" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="554.67" y="111.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (6,970,761 samples, 10.45%)</title><rect x="255.2" y="357" width="123.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="258.21" y="367.5" >_dl_sysdep_start</text>
</g>
<g >
<title>__sanitizer::DTLS_on_tls_get_addr (1,229,709 samples, 1.84%)</title><rect x="74.5" y="341" width="21.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="77.54" y="351.5" >_..</text>
</g>
<g >
<title>testing::UnitTest::Run (10,391,281 samples, 15.58%)</title><rect x="454.1" y="325" width="183.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="457.14" y="335.5" >testing::UnitTest::Run</text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;::PopulateFreeArray (609,368 samples, 0.91%)</title><rect x="202.1" y="357" width="10.8" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="205.14" y="367.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::_M_gen_rand (613,799 samples, 0.92%)</title><rect x="573.2" y="53" width="10.9" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="576.24" y="63.5" ></text>
</g>
<g >
<title>MyString::getUniqueWords (609,438 samples, 0.91%)</title><rect x="464.9" y="165" width="10.8" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="467.92" y="175.5" ></text>
</g>
<g >
<title>testing::internal::EqHelper::Compare&lt;char, char,  (609,286 samples, 0.91%)</title><rect x="562.5" y="165" width="10.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="565.46" y="175.5" ></text>
</g>
<g >
<title>MyStringTester_randomWordGeneration_Test::TestBody (613,799 samples, 0.92%)</title><rect x="573.2" y="181" width="10.9" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="576.24" y="191.5" ></text>
</g>
<g >
<title>testing::internal::StringStreamToString (608,934 samples, 0.91%)</title><rect x="638.0" y="277" width="10.8" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="641.01" y="287.5" ></text>
</g>
<g >
<title>[unknown] (609,402 samples, 0.91%)</title><rect x="212.9" y="325" width="10.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="215.92" y="335.5" ></text>
</g>
<g >
<title>testing::internal::StreamableToString&lt;char*&gt; (608,934 samples, 0.91%)</title><rect x="638.0" y="309" width="10.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="641.01" y="319.5" ></text>
</g>
<g >
<title>testing::internal::UnitTestImpl::FilterTests (609,225 samples, 0.91%)</title><rect x="627.2" y="261" width="10.8" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="630.23" y="271.5" ></text>
</g>
<g >
<title>std::map&lt;MyString, unsigned long, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::lower_bound (614,164 samples, 0.92%)</title><rect x="519.2" y="117" width="10.9" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="522.22" y="127.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (609,225 samples, 0.91%)</title><rect x="627.2" y="181" width="10.8" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="630.23" y="191.5" ></text>
</g>
<g >
<title>MyStringTester_countingWordsNumbersInTextIgnoringWordCases_Test::TestBody (3,073,213 samples, 4.61%)</title><rect x="475.7" y="181" width="54.4" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="478.70" y="191.5" >MyStr..</text>
</g>
<g >
<title>MyStringTester_countingUniqueWords_Test::TestBody (609,438 samples, 0.91%)</title><rect x="464.9" y="181" width="10.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="467.92" y="191.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::deallocate (609,143 samples, 0.91%)</title><rect x="454.1" y="101" width="10.8" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="457.14" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (609,143 samples, 0.91%)</title><rect x="454.1" y="149" width="10.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="457.14" y="159.5" ></text>
</g>
<g >
<title>std::operator== (609,844 samples, 0.91%)</title><rect x="551.7" y="37" width="10.8" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="554.67" y="47.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (614,820 samples, 0.92%)</title><rect x="508.3" y="101" width="10.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="511.34" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy (609,143 samples, 0.91%)</title><rect x="454.1" y="117" width="10.8" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="457.14" y="127.5" ></text>
</g>
<g >
<title>_dl_exception_create_format (605,502 samples, 0.91%)</title><rect x="244.5" y="357" width="10.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="247.50" y="367.5" ></text>
</g>
<g >
<title>testing::UnitTest::test_suite_to_run_count (609,345 samples, 0.91%)</title><rect x="616.5" y="229" width="10.7" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="619.45" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::lower_bound (614,164 samples, 0.92%)</title><rect x="519.2" y="101" width="10.9" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="522.22" y="111.5" ></text>
</g>
<g >
<title>_dl_map_object (534,151 samples, 0.80%)</title><rect x="1166.4" y="373" width="9.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1169.43" y="383.5" ></text>
</g>
<g >
<title>testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (7,953,997 samples, 11.93%)</title><rect x="454.1" y="197" width="140.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="457.14" y="207.5" >testing::internal..</text>
</g>
<g >
<title>__tls_get_addr (608,934 samples, 0.91%)</title><rect x="638.0" y="261" width="10.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="641.01" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::moneypunct&lt;wchar_t, false&gt;::~moneypunct (605,573 samples, 0.91%)</title><rect x="389.3" y="357" width="10.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="392.33" y="367.5" ></text>
</g>
<g >
<title>__libc_start_call_main (11,000,215 samples, 16.50%)</title><rect x="454.1" y="373" width="194.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="457.14" y="383.5" >__libc_start_call_main</text>
</g>
<g >
<title>__sanitizer::internal_read (606,497 samples, 0.91%)</title><rect x="223.7" y="357" width="10.7" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="226.71" y="367.5" ></text>
</g>
<g >
<title>MyString::operator[] (1,219,923 samples, 1.83%)</title><rect x="530.1" y="133" width="21.6" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="533.08" y="143.5" >M..</text>
</g>
<g >
<title>_dl_runtime_resolve_xsave (608,852 samples, 0.91%)</title><rect x="378.6" y="325" width="10.7" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="381.56" y="335.5" ></text>
</g>
<g >
<title>testing::internal::InitGoogleTestImpl&lt;char&gt; (608,934 samples, 0.91%)</title><rect x="638.0" y="325" width="10.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="641.01" y="335.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt;::PopulateFreeList (3,017,897 samples, 4.53%)</title><rect x="914.7" y="373" width="53.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="917.66" y="383.5" >__san..</text>
</g>
<g >
<title>testing::internal::TestEventRepeater::OnTestIterationStart (609,345 samples, 0.91%)</title><rect x="616.5" y="261" width="10.7" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="619.45" y="271.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (613,799 samples, 0.92%)</title><rect x="573.2" y="69" width="10.9" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="576.24" y="79.5" ></text>
</g>
<g >
<title>__sanitizer::internal_waitpid (10,460 samples, 0.02%)</title><rect x="1155.8" y="373" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1158.78" y="383.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (4,883,871 samples, 7.32%)</title><rect x="968.1" y="373" width="86.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="971.06" y="383.5" >__sanitize..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator[] (609,351 samples, 0.91%)</title><rect x="584.1" y="149" width="10.8" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="587.10" y="159.5" ></text>
</g>
<g >
<title>__sched_yield (591,710 samples, 0.89%)</title><rect x="1156.0" y="373" width="10.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1158.96" y="383.5" ></text>
</g>
<g >
<title>MyStringTester_indexAccessOperator_expectedPossibilityToAccesElementsWithIndex_Test::TestBody (609,286 samples, 0.91%)</title><rect x="562.5" y="181" width="10.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="565.46" y="191.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (613,799 samples, 0.92%)</title><rect x="573.2" y="117" width="10.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="576.24" y="127.5" ></text>
</g>
<g >
<title>std::map&lt;MyString, unsigned long, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::operator[] (1,228,984 samples, 1.84%)</title><rect x="508.3" y="133" width="21.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="511.34" y="143.5" >s..</text>
</g>
<g >
<title>RUN_ALL_TESTS (10,391,281 samples, 15.58%)</title><rect x="454.1" y="341" width="183.9" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="457.14" y="351.5" >RUN_ALL_TESTS</text>
</g>
<g >
<title>__asan::Allocator::Allocate (1,218,789 samples, 1.83%)</title><rect x="400.0" y="373" width="21.6" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="403.05" y="383.5" >_..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator[] (615,764 samples, 0.92%)</title><rect x="486.6" y="117" width="10.9" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="489.57" y="127.5" ></text>
</g>
<g >
<title>testing::internal::TestFactoryImpl&lt;MyStringTester_istreamOperator_expectedTextCopiedFromStreamToString_Test&gt;::CreateTest (609,352 samples, 0.91%)</title><rect x="605.7" y="197" width="10.8" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="608.67" y="207.5" ></text>
</g>
<g >
<title>non-virtual thunk to std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringstream (608,852 samples, 0.91%)</title><rect x="378.6" y="357" width="10.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="381.56" y="367.5" ></text>
</g>
<g >
<title>std::less&lt;MyString&gt;::operator (614,820 samples, 0.92%)</title><rect x="508.3" y="85" width="10.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="511.34" y="95.5" ></text>
</g>
<g >
<title>testing::Message::GetString[abi:cxx11] (608,934 samples, 0.91%)</title><rect x="638.0" y="293" width="10.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="641.01" y="303.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (609,143 samples, 0.91%)</title><rect x="454.1" y="85" width="10.8" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="457.14" y="95.5" ></text>
</g>
<g >
<title>[unknown] (4,816,852 samples, 7.22%)</title><rect x="42.1" y="357" width="85.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="45.08" y="367.5" >[unknown]</text>
</g>
<g >
<title>__asan_unregister_globals (611,299 samples, 0.92%)</title><rect x="42.1" y="325" width="10.8" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="45.08" y="335.5" ></text>
</g>
<g >
<title>__lsan::ScanRangeForPointers (11,478,746 samples, 17.21%)</title><rect x="708.9" y="373" width="203.1" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="711.91" y="383.5" >__lsan::ScanRangeForPointers</text>
</g>
<g >
<title>_dl_lookup_symbol_x (1,752,774 samples, 2.63%)</title><rect x="96.3" y="341" width="31.0" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="99.30" y="351.5" >_d..</text>
</g>
<g >
<title>testing::internal::PrettyUnitTestResultPrinter::OnTestIterationStart (609,345 samples, 0.91%)</title><rect x="616.5" y="245" width="10.7" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="619.45" y="255.5" ></text>
</g>
<g >
<title>dl_main (6,569,515 samples, 9.85%)</title><rect x="262.3" y="341" width="116.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="265.31" y="351.5" >dl_main</text>
</g>
<g >
<title>MyString::countWordsUsageIgnoringCases (2,459,008 samples, 3.69%)</title><rect x="486.6" y="165" width="43.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="489.57" y="175.5" >MySt..</text>
</g>
<g >
<title>testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (10,391,281 samples, 15.58%)</title><rect x="454.1" y="293" width="183.9" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="457.14" y="303.5" >testing::internal::Hand..</text>
</g>
<g >
<title>__libc_start_main@@GLIBC_2.34 (2,434,258 samples, 3.65%)</title><rect x="648.8" y="373" width="43.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="651.79" y="383.5" >__li..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (605,466 samples, 0.91%)</title><rect x="20.8" y="373" width="10.7" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="23.78" y="383.5" ></text>
</g>
<g >
<title>testing::internal::CmpHelperEQ&lt;char, char&gt; (609,286 samples, 0.91%)</title><rect x="562.5" y="149" width="10.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="565.46" y="159.5" ></text>
</g>
<g >
<title>testing::internal::(anonymous namespace)::PositiveAndNegativeUnitTestFilter::MatchesTest (609,225 samples, 0.91%)</title><rect x="627.2" y="245" width="10.8" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="630.23" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator[] (608,173 samples, 0.91%)</title><rect x="540.9" y="117" width="10.8" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="543.91" y="127.5" ></text>
</g>
<g >
<title>_dl_relocate_object (6,569,515 samples, 9.85%)</title><rect x="262.3" y="325" width="116.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="265.31" y="335.5" >_dl_relocate_o..</text>
</g>
<g >
<title>MyString::operator&lt;=&gt; (614,164 samples, 0.92%)</title><rect x="519.2" y="53" width="10.9" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="522.22" y="63.5" ></text>
</g>
<g >
<title>__pipe (609,400 samples, 0.91%)</title><rect x="191.4" y="357" width="10.7" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="194.36" y="367.5" ></text>
</g>
<g >
<title>MyString::base_iterator&lt;false&gt;::operator* (615,764 samples, 0.92%)</title><rect x="486.6" y="149" width="10.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="489.57" y="159.5" ></text>
</g>
<g >
<title>__GI___open64_nocancel (401,246 samples, 0.60%)</title><rect x="255.2" y="341" width="7.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="258.21" y="351.5" ></text>
</g>
<g >
<title>testing::TestSuite::Run (9,172,711 samples, 13.76%)</title><rect x="454.1" y="261" width="162.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="457.14" y="271.5" >testing::TestSuite::..</text>
</g>
<g >
<title>std::__cxx11::moneypunct&lt;wchar_t, false&gt;::_M_initialize_moneypunct (605,573 samples, 0.91%)</title><rect x="389.3" y="325" width="10.7" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="392.33" y="335.5" ></text>
</g>
<g >
<title>std::less&lt;MyString&gt;::operator (614,164 samples, 0.92%)</title><rect x="519.2" y="69" width="10.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="522.22" y="79.5" ></text>
</g>
<g >
<title>MyString::empty (614,260 samples, 0.92%)</title><rect x="497.5" y="133" width="10.8" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="500.47" y="143.5" ></text>
</g>
<g >
<title>testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::TestFactoryBase, testing::Test*&gt; (609,352 samples, 0.91%)</title><rect x="605.7" y="229" width="10.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="608.67" y="239.5" ></text>
</g>
<g >
<title>[unknown] (609,402 samples, 0.91%)</title><rect x="212.9" y="341" width="10.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="215.92" y="351.5" ></text>
</g>
<g >
<title>tests (66,685,848 samples, 100.00%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >tests</text>
</g>
<g >
<title>MyString::~MyString (609,143 samples, 0.91%)</title><rect x="454.1" y="165" width="10.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="457.14" y="175.5" ></text>
</g>
<g >
<title>std::map&lt;MyString, unsigned long, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::operator[] (609,844 samples, 0.91%)</title><rect x="551.7" y="133" width="10.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="554.67" y="143.5" ></text>
</g>
<g >
<title>testing::internal::GetTimeInMillis (609,362 samples, 0.91%)</title><rect x="594.9" y="229" width="10.8" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="597.89" y="239.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (609,362 samples, 0.91%)</title><rect x="594.9" y="197" width="10.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="597.89" y="207.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I__ZN62MyStringTester_emptyStringConstruction_expectedSizeIsZero_Test10test_info_E (609,647 samples, 0.91%)</title><rect x="648.8" y="357" width="10.8" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="651.79" y="367.5" ></text>
</g>
<g >
<title>__sanitizer::internal_clone (629,479 samples, 0.94%)</title><rect x="1055.9" y="373" width="11.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1058.90" y="383.5" ></text>
</g>
<g >
<title>testing::internal::GetUnitTestImpl (609,647 samples, 0.91%)</title><rect x="648.8" y="309" width="10.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="651.79" y="319.5" ></text>
</g>
<g >
<title>MyString::countWordsUsageIgnoringCases (1,843,244 samples, 2.76%)</title><rect x="497.5" y="149" width="32.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="500.47" y="159.5" >My..</text>
</g>
<g >
<title>testing::Test::Run (7,953,997 samples, 11.93%)</title><rect x="454.1" y="229" width="140.8" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="457.14" y="239.5" >testing::Test::Run</text>
</g>
<g >
<title>makeRandomCharGenerator (613,799 samples, 0.92%)</title><rect x="573.2" y="133" width="10.9" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="576.24" y="143.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (609,362 samples, 0.91%)</title><rect x="594.9" y="213" width="10.8" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="597.89" y="223.5" ></text>
</g>
<g >
<title>__sanitizer::TracerThread (80,184 samples, 0.12%)</title><rect x="1054.5" y="373" width="1.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1057.48" y="383.5" ></text>
</g>
<g >
<title>__asan::FakeStack::ForEachFakeFrame (490,926 samples, 0.74%)</title><rect x="127.3" y="357" width="8.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="130.31" y="367.5" ></text>
</g>
</g>
</svg>
