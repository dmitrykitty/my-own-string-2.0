<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="454.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="437" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="437" > </text>
<g id="frames">
<g >
<title>_dl_start (221,638 samples, 0.33%)</title><rect x="1165.5" y="357" width="3.8" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1168.47" y="367.5" ></text>
</g>
<g >
<title>_start (40,658 samples, 0.06%)</title><rect x="1169.3" y="373" width="0.7" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1172.33" y="383.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (1,057,434 samples, 1.56%)</title><rect x="26.9" y="341" width="18.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="29.86" y="351.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I__ZN7testing15AssertionResultC2ERKS0_ (559,358 samples, 0.82%)</title><rect x="629.7" y="357" width="9.8" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="632.73" y="367.5" ></text>
</g>
<g >
<title>__static_initialization_and_destruction_0 (559,358 samples, 0.82%)</title><rect x="629.7" y="341" width="9.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="632.73" y="351.5" ></text>
</g>
<g >
<title>testing::FormatCountableNoun (521,324 samples, 0.77%)</title><rect x="588.9" y="213" width="9.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="591.87" y="223.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt;::PopulateFreeList (4,245,508 samples, 6.25%)</title><rect x="864.9" y="373" width="73.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="867.94" y="383.5" >__saniti..</text>
</g>
<g >
<title>testing::internal::(anonymous namespace)::UnitTestFilter::UnitTestFilter (609,546 samples, 0.90%)</title><rect x="619.1" y="277" width="10.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="622.14" y="287.5" ></text>
</g>
<g >
<title>__GI___close_nocancel (557,953 samples, 0.82%)</title><rect x="405.8" y="373" width="9.7" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="408.76" y="383.5" ></text>
</g>
<g >
<title>__lsan::ScanRangeForPointers (11,212,649 samples, 16.52%)</title><rect x="670.1" y="373" width="194.8" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="673.07" y="383.5" >__lsan::ScanRangeForPoint..</text>
</g>
<g >
<title>[unknown] (484,326 samples, 0.71%)</title><rect x="503.9" y="117" width="8.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="506.88" y="127.5" ></text>
</g>
<g >
<title>check_match (672,612 samples, 0.99%)</title><rect x="394.1" y="357" width="11.7" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="397.07" y="367.5" ></text>
</g>
<g >
<title>MyString::operator[] (484,624 samples, 0.71%)</title><rect x="495.5" y="133" width="8.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="498.45" y="143.5" ></text>
</g>
<g >
<title>[unknown] (489,809 samples, 0.72%)</title><rect x="554.7" y="117" width="8.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="557.66" y="127.5" ></text>
</g>
<g >
<title>__sanitizer::internal_close (1,606,797 samples, 2.37%)</title><rect x="1022.8" y="373" width="27.9" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1025.77" y="383.5" >_..</text>
</g>
<g >
<title>testing::internal::UnitTestImpl::RunAllTests (6,389,145 samples, 9.41%)</title><rect x="486.9" y="277" width="111.0" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="489.89" y="287.5" >testing::inte..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (610,650 samples, 0.90%)</title><rect x="597.9" y="309" width="10.6" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="600.93" y="319.5" ></text>
</g>
<g >
<title>testing::internal::UnitTestImpl::AddTestInfo (1,218,892 samples, 1.80%)</title><rect x="608.5" y="309" width="21.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="611.55" y="319.5" ></text>
</g>
<g >
<title>MyStringTester_countingWordsNumbersInText_Test::TestBody (1,469,461 samples, 2.16%)</title><rect x="546.1" y="181" width="25.6" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="549.15" y="191.5" >M..</text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, MyString, std::_Identity&lt;MyString&gt;, std::less&lt;MyString&gt;, std::allocator&lt;MyString&gt; &gt;::_M_insert_unique&lt;MyString const&amp;&gt; (492,861 samples, 0.73%)</title><rect x="486.9" y="133" width="8.6" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="489.89" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (559,358 samples, 0.82%)</title><rect x="629.7" y="245" width="9.8" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="632.73" y="255.5" ></text>
</g>
<g >
<title>RUN_ALL_TESTS (6,389,145 samples, 9.41%)</title><rect x="486.9" y="341" width="111.0" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="489.89" y="351.5" >RUN_ALL_TESTS</text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::insert (609,546 samples, 0.90%)</title><rect x="619.1" y="165" width="10.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="622.14" y="175.5" ></text>
</g>
<g >
<title>MyString::base_iterator&lt;false&gt;::operator++ (487,544 samples, 0.72%)</title><rect x="537.7" y="133" width="8.4" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="540.67" y="143.5" ></text>
</g>
<g >
<title>__sanitizer::internal_memset (1,211,070 samples, 1.78%)</title><rect x="1050.7" y="373" width="21.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1053.70" y="383.5" ></text>
</g>
<g >
<title>_sub_I_00099_1 (608,136 samples, 0.90%)</title><rect x="1170.0" y="373" width="10.6" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="1173.03" y="383.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;true, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::insert_iterator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (609,546 samples, 0.90%)</title><rect x="619.1" y="213" width="10.6" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="622.14" y="223.5" ></text>
</g>
<g >
<title>testing::internal::StringStreamToString (559,358 samples, 0.82%)</title><rect x="629.7" y="277" width="9.8" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="632.73" y="287.5" ></text>
</g>
<g >
<title>std::construct_at&lt;testing::TestInfo*, testing::TestInfo* const&amp;&gt; (609,346 samples, 0.90%)</title><rect x="608.5" y="261" width="10.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="611.55" y="271.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I__ZN62MyStringTester_emptyStringConstruction_expectedSizeIsZero_Test10test_info_E (1,829,542 samples, 2.69%)</title><rect x="597.9" y="357" width="31.8" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="600.93" y="367.5" >_G..</text>
</g>
<g >
<title>memmove (604,545 samples, 0.89%)</title><rect x="360.2" y="325" width="10.5" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="363.18" y="335.5" ></text>
</g>
<g >
<title>testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (6,389,145 samples, 9.41%)</title><rect x="486.9" y="309" width="111.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="489.89" y="319.5" >testing::inte..</text>
</g>
<g >
<title>__asan_unregister_globals (970,157 samples, 1.43%)</title><rect x="10.0" y="325" width="16.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;true, __gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::insert_iterator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (609,546 samples, 0.90%)</title><rect x="619.1" y="245" width="10.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="622.14" y="255.5" ></text>
</g>
<g >
<title>MyString::generateRandomWord (487,912 samples, 0.72%)</title><rect x="571.7" y="165" width="8.5" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="574.69" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (559,358 samples, 0.82%)</title><rect x="629.7" y="261" width="9.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="632.73" y="271.5" ></text>
</g>
<g >
<title>testing::Test::Run (5,366,900 samples, 7.90%)</title><rect x="486.9" y="229" width="93.3" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="489.89" y="239.5" >testing::Te..</text>
</g>
<g >
<title>std::generate_n&lt;MyString::base_iterator&lt;false&gt;, unsigned long, makeRandomCharGenerator (487,912 samples, 0.72%)</title><rect x="571.7" y="149" width="8.5" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="574.69" y="159.5" ></text>
</g>
<g >
<title>__asan::FakeStack::ForEachFakeFrame (643,926 samples, 0.95%)</title><rect x="79.1" y="357" width="11.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="82.12" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (489,940 samples, 0.72%)</title><rect x="546.1" y="101" width="8.6" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="549.15" y="111.5" ></text>
</g>
<g >
<title>__sched_yield (970,971 samples, 1.43%)</title><rect x="1119.9" y="373" width="16.9" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1122.93" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (610,650 samples, 0.90%)</title><rect x="597.9" y="325" width="10.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="600.93" y="335.5" ></text>
</g>
<g >
<title>memset (674,458 samples, 0.99%)</title><rect x="1153.8" y="357" width="11.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1156.75" y="367.5" ></text>
</g>
<g >
<title>testing::internal::MakeAndRegisterTestInfo (1,218,892 samples, 1.80%)</title><rect x="608.5" y="325" width="21.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="611.55" y="335.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (484,326 samples, 0.71%)</title><rect x="503.9" y="85" width="8.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="506.88" y="95.5" ></text>
</g>
<g >
<title>MyStringTester_countingUniqueWords_Test::TestBody (492,861 samples, 0.73%)</title><rect x="486.9" y="181" width="8.6" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="489.89" y="191.5" ></text>
</g>
<g >
<title>testing::internal::TestEventRepeater::OnTestCaseStart (521,324 samples, 0.77%)</title><rect x="588.9" y="245" width="9.0" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="591.87" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (521,324 samples, 0.77%)</title><rect x="588.9" y="133" width="9.0" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="591.87" y="143.5" ></text>
</g>
<g >
<title>[unknown] (970,157 samples, 1.43%)</title><rect x="10.0" y="341" width="16.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>__ubsan::checkDynamicType (975,167 samples, 1.44%)</title><rect x="1136.8" y="373" width="17.0" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1139.80" y="383.5" ></text>
</g>
<g >
<title>__sanitizer::DTLS_on_tls_get_addr (490,214 samples, 0.72%)</title><rect x="70.6" y="341" width="8.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="73.60" y="351.5" ></text>
</g>
<g >
<title>MyString::toLower (487,544 samples, 0.72%)</title><rect x="537.7" y="149" width="8.4" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="540.67" y="159.5" ></text>
</g>
<g >
<title>testing::internal::UnitTestImpl::catch_exceptions (500,921 samples, 0.74%)</title><rect x="580.2" y="213" width="8.7" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="583.17" y="223.5" ></text>
</g>
<g >
<title>testing::internal::UnitTestImpl::GetTestSuite (609,546 samples, 0.90%)</title><rect x="619.1" y="293" width="10.6" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="622.14" y="303.5" ></text>
</g>
<g >
<title>std::map&lt;MyString, unsigned long, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::operator[] (1,944,498 samples, 2.86%)</title><rect x="503.9" y="133" width="33.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="506.88" y="143.5" >st..</text>
</g>
<g >
<title>std::vector&lt;testing::TestInfo*, std::allocator&lt;testing::TestInfo*&gt; &gt;::push_back (609,346 samples, 0.90%)</title><rect x="608.5" y="277" width="10.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="611.55" y="287.5" ></text>
</g>
<g >
<title>testing::TestSuite::AddTestInfo (609,346 samples, 0.90%)</title><rect x="608.5" y="293" width="10.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="611.55" y="303.5" ></text>
</g>
<g >
<title>MyString::countWordsUsageIgnoringCases (1,944,498 samples, 2.86%)</title><rect x="503.9" y="149" width="33.8" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="506.88" y="159.5" >My..</text>
</g>
<g >
<title>[unknown] (3,977,234 samples, 5.86%)</title><rect x="10.0" y="357" width="69.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >[unknown]</text>
</g>
<g >
<title>printf_common (487,683 samples, 0.72%)</title><rect x="116.4" y="341" width="8.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="119.42" y="351.5" ></text>
</g>
<g >
<title>[unknown] (516,303 samples, 0.76%)</title><rect x="107.4" y="341" width="9.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="110.45" y="351.5" ></text>
</g>
<g >
<title>main (6,389,145 samples, 9.41%)</title><rect x="486.9" y="357" width="111.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="489.89" y="367.5" >main</text>
</g>
<g >
<title>MyString::base_iterator&lt;false&gt;::operator* (484,624 samples, 0.71%)</title><rect x="495.5" y="149" width="8.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="498.45" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (485,308 samples, 0.71%)</title><rect x="512.3" y="101" width="8.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="515.30" y="111.5" ></text>
</g>
<g >
<title>std::map&lt;MyString, unsigned long, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::operator[] (979,521 samples, 1.44%)</title><rect x="554.7" y="133" width="17.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="557.66" y="143.5" ></text>
</g>
<g >
<title>MyString::operator&lt;=&gt; (974,864 samples, 1.44%)</title><rect x="520.7" y="53" width="17.0" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="523.73" y="63.5" ></text>
</g>
<g >
<title>[unknown] (22,771,014 samples, 33.54%)</title><rect x="10.0" y="373" width="395.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >[unknown]</text>
</g>
<g >
<title>__interceptor_vprintf (487,683 samples, 0.72%)</title><rect x="116.4" y="357" width="8.5" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="119.42" y="367.5" ></text>
</g>
<g >
<title>__sanitizer::ThreadLister::ListThreads (162,034 samples, 0.24%)</title><rect x="183.9" y="357" width="2.8" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="186.85" y="367.5" ></text>
</g>
<g >
<title>__lsan::GetUserBegin (1,630,031 samples, 2.40%)</title><rect x="136.2" y="357" width="28.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="139.18" y="367.5" >__..</text>
</g>
<g >
<title>__libc_start_call_main (6,389,145 samples, 9.41%)</title><rect x="486.9" y="373" width="111.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="489.89" y="383.5" >__libc_start_..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (559,358 samples, 0.82%)</title><rect x="629.7" y="213" width="9.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="632.73" y="223.5" ></text>
</g>
<g >
<title>std::less&lt;MyString&gt;::operator (974,864 samples, 1.44%)</title><rect x="520.7" y="69" width="17.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="523.73" y="79.5" ></text>
</g>
<g >
<title>testing::internal::StringStreamToString (521,324 samples, 0.77%)</title><rect x="588.9" y="165" width="9.0" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="591.87" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (559,358 samples, 0.82%)</title><rect x="629.7" y="197" width="9.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="632.73" y="207.5" ></text>
</g>
<g >
<title>testing::UnitTest::Run (6,389,145 samples, 9.41%)</title><rect x="486.9" y="325" width="111.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="489.89" y="335.5" >testing::Unit..</text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, MyString, std::_Identity&lt;MyString&gt;, std::less&lt;MyString&gt;, std::allocator&lt;MyString&gt; &gt;::_M_get_insert_unique_pos (492,861 samples, 0.73%)</title><rect x="486.9" y="117" width="8.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="489.89" y="127.5" ></text>
</g>
<g >
<title>std::less&lt;MyString&gt;::operator (489,712 samples, 0.72%)</title><rect x="563.2" y="69" width="8.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="566.18" y="79.5" ></text>
</g>
<g >
<title>testing::Message::GetString[abi:cxx11] (559,358 samples, 0.82%)</title><rect x="629.7" y="293" width="9.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="632.73" y="303.5" ></text>
</g>
<g >
<title>testing::internal::StreamableToString&lt;int&gt; (521,324 samples, 0.77%)</title><rect x="588.9" y="197" width="9.0" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="591.87" y="207.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1,220,384 samples, 1.80%)</title><rect x="639.5" y="341" width="21.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="642.45" y="351.5" ></text>
</g>
<g >
<title>testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (5,366,900 samples, 7.90%)</title><rect x="486.9" y="213" width="93.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="489.89" y="223.5" >testing::in..</text>
</g>
<g >
<title>testing::internal::FlagToEnvVar (559,358 samples, 0.82%)</title><rect x="629.7" y="309" width="9.8" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="632.73" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__mod&lt;unsigned long, 624ul, 1ul, 0ul&gt; (487,912 samples, 0.72%)</title><rect x="571.7" y="85" width="8.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="574.69" y="95.5" ></text>
</g>
<g >
<title>std::map&lt;MyString, unsigned long, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::lower_bound (489,712 samples, 0.72%)</title><rect x="563.2" y="117" width="8.5" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="566.18" y="127.5" ></text>
</g>
<g >
<title>std::__copy_move_a1&lt;true, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::insert_iterator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (609,546 samples, 0.90%)</title><rect x="619.1" y="229" width="10.6" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="622.14" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement (485,308 samples, 0.71%)</title><rect x="512.3" y="85" width="8.4" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="515.30" y="95.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1,112,933 samples, 1.64%)</title><rect x="164.5" y="357" width="19.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="167.51" y="367.5" ></text>
</g>
<g >
<title>__libc_start_main@@GLIBC_2.34 (3,609,284 samples, 5.32%)</title><rect x="597.9" y="373" width="62.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="600.93" y="383.5" >__libc..</text>
</g>
<g >
<title>[unknown] (489,809 samples, 0.72%)</title><rect x="554.7" y="101" width="8.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="557.66" y="111.5" ></text>
</g>
<g >
<title>__sanitizer::internal_munmap (608,788 samples, 0.90%)</title><rect x="1108.9" y="373" width="10.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1111.86" y="383.5" ></text>
</g>
<g >
<title>__sanitizer::internal_mmap (2,135,571 samples, 3.15%)</title><rect x="1071.7" y="373" width="37.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1074.75" y="383.5" >__s..</text>
</g>
<g >
<title>_dl_sysdep_start (9,418,673 samples, 13.87%)</title><rect x="230.4" y="357" width="163.7" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="233.38" y="367.5" >_dl_sysdep_start</text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (540,694 samples, 0.80%)</title><rect x="1180.6" y="373" width="9.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1183.60" y="383.5" ></text>
</g>
<g >
<title>__sanitizer::internal_prctl (27,759 samples, 0.04%)</title><rect x="1119.4" y="373" width="0.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1122.45" y="383.5" ></text>
</g>
<g >
<title>MyStringTester_randomWordGeneration_Test::TestBody (487,912 samples, 0.72%)</title><rect x="571.7" y="181" width="8.5" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="574.69" y="191.5" ></text>
</g>
<g >
<title>[unknown] (484,326 samples, 0.71%)</title><rect x="503.9" y="101" width="8.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="506.88" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::cbegin (609,546 samples, 0.90%)</title><rect x="619.1" y="149" width="10.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="622.14" y="159.5" ></text>
</g>
<g >
<title>MyStringTester_countingWordsNumbersInTextIgnoringWordCases_Test::TestBody (2,916,666 samples, 4.30%)</title><rect x="495.5" y="181" width="50.6" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="498.45" y="191.5" >MyStr..</text>
</g>
<g >
<title>testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (6,389,145 samples, 9.41%)</title><rect x="486.9" y="293" width="111.0" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="489.89" y="303.5" >testing::inte..</text>
</g>
<g >
<title>__asan_stack_malloc_1 (3,013,026 samples, 4.44%)</title><rect x="415.5" y="373" width="52.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="418.46" y="383.5" >__asa..</text>
</g>
<g >
<title>__lsan::PointsIntoChunk (541,019 samples, 0.80%)</title><rect x="660.7" y="373" width="9.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="663.66" y="383.5" ></text>
</g>
<g >
<title>_dl_map_object (674,458 samples, 0.99%)</title><rect x="1153.8" y="373" width="11.7" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1156.75" y="383.5" ></text>
</g>
<g >
<title>MyString::countWordsUsageIgnoringCases (1,469,461 samples, 2.16%)</title><rect x="546.1" y="149" width="25.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="549.15" y="159.5" >M..</text>
</g>
<g >
<title>mprotect (1,345,569 samples, 1.98%)</title><rect x="370.7" y="325" width="23.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="373.69" y="335.5" >m..</text>
</g>
<g >
<title>_sub_I_00099_1 (1,220,384 samples, 1.80%)</title><rect x="639.5" y="357" width="21.2" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="642.45" y="367.5" ></text>
</g>
<g >
<title>MyString::clear (489,940 samples, 0.72%)</title><rect x="546.1" y="133" width="8.6" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="549.15" y="143.5" ></text>
</g>
<g >
<title>__cxxabiv1::__class_type_info::~__class_type_info (516,303 samples, 0.76%)</title><rect x="107.4" y="357" width="9.0" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="110.45" y="367.5" ></text>
</g>
<g >
<title>std::map&lt;MyString, unsigned long, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::lower_bound (974,864 samples, 1.44%)</title><rect x="520.7" y="117" width="17.0" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="523.73" y="127.5" ></text>
</g>
<g >
<title>testing::internal::PrettyUnitTestResultPrinter::OnTestCaseStart (521,324 samples, 0.77%)</title><rect x="588.9" y="229" width="9.0" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="591.87" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_M_lower_bound (974,864 samples, 1.44%)</title><rect x="520.7" y="85" width="17.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="523.73" y="95.5" ></text>
</g>
<g >
<title>testing::Message::GetString[abi:cxx11] (521,324 samples, 0.77%)</title><rect x="588.9" y="181" width="9.0" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="591.87" y="191.5" ></text>
</g>
<g >
<title>testing::TestInfo::Run (5,867,821 samples, 8.64%)</title><rect x="486.9" y="245" width="102.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="489.89" y="255.5" >testing::Tes..</text>
</g>
<g >
<title>__sanitizer::internal_read (2,027,703 samples, 2.99%)</title><rect x="186.7" y="357" width="35.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="189.67" y="367.5" >__..</text>
</g>
<g >
<title>std::__detail::_Mod&lt;unsigned long, 624ul, 1ul, 0ul, true, true&gt;::__calc (487,912 samples, 0.72%)</title><rect x="571.7" y="69" width="8.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="574.69" y="79.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (1,459,429 samples, 2.15%)</title><rect x="45.2" y="341" width="25.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="48.24" y="351.5" >_..</text>
</g>
<g >
<title>isDerivedFromAtOffset (516,303 samples, 0.76%)</title><rect x="107.4" y="325" width="9.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="110.45" y="335.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_3 (609,705 samples, 0.90%)</title><rect x="476.3" y="373" width="10.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="479.29" y="383.5" ></text>
</g>
<g >
<title>all (67,893,538 samples, 100%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (492,861 samples, 0.73%)</title><rect x="486.9" y="101" width="8.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="489.89" y="111.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;true, false, std::random_access_iterator_tag&gt;::__copy_m&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::insert_iterator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (609,546 samples, 0.90%)</title><rect x="619.1" y="197" width="10.6" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="622.14" y="207.5" ></text>
</g>
<g >
<title>__sanitizer::internal_clone (10,366 samples, 0.02%)</title><rect x="1022.6" y="373" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1025.59" y="383.5" ></text>
</g>
<g >
<title>makeRandomCharGenerator (487,912 samples, 0.72%)</title><rect x="571.7" y="133" width="8.5" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="574.69" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (559,358 samples, 0.82%)</title><rect x="629.7" y="229" width="9.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="632.73" y="239.5" ></text>
</g>
<g >
<title>std::operator== (487,545 samples, 0.72%)</title><rect x="529.2" y="37" width="8.5" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="532.20" y="47.5" ></text>
</g>
<g >
<title>testing::TestSuite::Run (6,389,145 samples, 9.41%)</title><rect x="486.9" y="261" width="111.0" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="489.89" y="271.5" >testing::Test..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::clear (489,940 samples, 0.72%)</title><rect x="546.1" y="117" width="8.6" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="549.15" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_M_lower_bound (489,712 samples, 0.72%)</title><rect x="563.2" y="85" width="8.5" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="566.18" y="95.5" ></text>
</g>
<g >
<title>__lsan::ForEachChunk (649,131 samples, 0.96%)</title><rect x="124.9" y="357" width="11.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="127.90" y="367.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (985,735 samples, 1.45%)</title><rect x="90.3" y="357" width="17.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="93.32" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;MyString const&amp;&gt;, std::tuple&lt;&gt; &gt; (485,308 samples, 0.71%)</title><rect x="512.3" y="117" width="8.4" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="515.30" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (521,324 samples, 0.77%)</title><rect x="588.9" y="149" width="9.0" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="591.87" y="159.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::seed (487,912 samples, 0.72%)</title><rect x="571.7" y="101" width="8.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="574.69" y="111.5" ></text>
</g>
<g >
<title>testing::internal::Int32FromGTestEnv (559,358 samples, 0.82%)</title><rect x="629.7" y="325" width="9.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="632.73" y="335.5" ></text>
</g>
<g >
<title>testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::TestFactoryBase, testing::Test*&gt; (500,921 samples, 0.74%)</title><rect x="580.2" y="229" width="8.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="583.17" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::lower_bound (974,864 samples, 1.44%)</title><rect x="520.7" y="101" width="17.0" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="523.73" y="111.5" ></text>
</g>
<g >
<title>_dl_relocate_object (7,468,559 samples, 11.00%)</title><rect x="230.4" y="325" width="129.8" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="233.38" y="335.5" >_dl_relocate_obj..</text>
</g>
<g >
<title>std::set&lt;MyString, std::less&lt;MyString&gt;, std::allocator&lt;MyString&gt; &gt;::insert (492,861 samples, 0.73%)</title><rect x="486.9" y="149" width="8.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="489.89" y="159.5" ></text>
</g>
<g >
<title>std::insert_iterator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator= (609,546 samples, 0.90%)</title><rect x="619.1" y="181" width="10.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="622.14" y="191.5" ></text>
</g>
<g >
<title>dl_main (9,418,673 samples, 13.87%)</title><rect x="230.4" y="341" width="163.7" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="233.38" y="351.5" >dl_main</text>
</g>
<g >
<title>MyString::countWordsUsageIgnoringCases (2,916,666 samples, 4.30%)</title><rect x="495.5" y="165" width="50.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="498.45" y="175.5" >MyStr..</text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::lower_bound (489,712 samples, 0.72%)</title><rect x="563.2" y="101" width="8.5" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="566.18" y="111.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (4,825,150 samples, 7.11%)</title><rect x="938.7" y="373" width="83.9" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="941.73" y="383.5" >__sanitiz..</text>
</g>
<g >
<title>MyString::getUniqueWords (492,861 samples, 0.73%)</title><rect x="486.9" y="165" width="8.6" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="489.89" y="175.5" ></text>
</g>
<g >
<title>_dl_start_user (221,638 samples, 0.33%)</title><rect x="1165.5" y="373" width="3.8" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1168.47" y="383.5" ></text>
</g>
<g >
<title>__sanitizer::internal_write (487,016 samples, 0.72%)</title><rect x="221.9" y="357" width="8.5" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="224.91" y="367.5" ></text>
</g>
<g >
<title>tests (67,893,538 samples, 100.00%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >tests</text>
</g>
<g >
<title>__asan_stack_malloc_2 (487,012 samples, 0.72%)</title><rect x="467.8" y="373" width="8.5" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="470.83" y="383.5" ></text>
</g>
<g >
<title>__static_initialization_and_destruction_0 (1,829,542 samples, 2.69%)</title><rect x="597.9" y="341" width="31.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="600.93" y="351.5" >__..</text>
</g>
<g >
<title>MyString::countWordsUsageIgnoringCases (1,469,461 samples, 2.16%)</title><rect x="546.1" y="165" width="25.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="549.15" y="175.5" >M..</text>
</g>
<g >
<title>testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (5,366,900 samples, 7.90%)</title><rect x="486.9" y="197" width="93.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="489.89" y="207.5" >testing::in..</text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::mersenne_twister_engine (487,912 samples, 0.72%)</title><rect x="571.7" y="117" width="8.5" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="574.69" y="127.5" ></text>
</g>
<g >
<title>std::move&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::insert_iterator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (609,546 samples, 0.90%)</title><rect x="619.1" y="261" width="10.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="622.14" y="271.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (489,809 samples, 0.72%)</title><rect x="554.7" y="85" width="8.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="557.66" y="95.5" ></text>
</g>
</g>
</svg>
