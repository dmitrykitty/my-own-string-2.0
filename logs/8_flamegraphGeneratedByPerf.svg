<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="550.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="533" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="533" > </text>
<g id="frames">
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (637,022 samples, 0.71%)</title><rect x="739.8" y="181" width="8.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="742.80" y="191.5" ></text>
</g>
<g >
<title>__lsan::GetUserBegin (1,697,559 samples, 1.88%)</title><rect x="175.3" y="453" width="22.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="178.25" y="463.5" >_..</text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (482,466 samples, 0.54%)</title><rect x="755.1" y="325" width="6.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="758.09" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;testing::TestInfo**, std::vector&lt;testing::TestInfo*, std::allocator&lt;testing::TestInfo*&gt; &gt; &gt; (517,267 samples, 0.57%)</title><rect x="457.2" y="261" width="6.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="460.24" y="271.5" ></text>
</g>
<g >
<title>__sanitizer::internal_memset (1,371,040 samples, 1.52%)</title><rect x="1111.1" y="469" width="18.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1114.15" y="479.5" ></text>
</g>
<g >
<title>MyStringTester_countingUniqueWords_Test::TestBody (1,177,448 samples, 1.31%)</title><rect x="464.0" y="277" width="15.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="467.02" y="287.5" ></text>
</g>
<g >
<title>__sanitizer::ParseNumber (460,648 samples, 0.51%)</title><rect x="969.9" y="469" width="6.0" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="972.86" y="479.5" ></text>
</g>
<g >
<title>std::__merge_sort_with_buffer&lt;__gnu_cxx::__normal_iterator&lt;testing::TestInfo**, std::vector&lt;testing::TestInfo*, std::allocator&lt;testing::TestInfo*&gt; &gt; &gt;, testing::TestInfo**, __gnu_cxx::__ops::_Iter_comp_iter&lt;testing::TestSuite::Run (517,267 samples, 0.57%)</title><rect x="457.2" y="293" width="6.8" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="460.24" y="303.5" ></text>
</g>
<g >
<title>std::map&lt;MyString, unsigned long, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::lower_bound (7,633,646 samples, 8.47%)</title><rect x="560.1" y="213" width="100.0" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="563.11" y="223.5" >std::map&lt;MyS..</text>
</g>
<g >
<title>std::__chunk_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;testing::TestInfo**, std::vector&lt;testing::TestInfo*, std::allocator&lt;testing::TestInfo*&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;testing::TestSuite::Run (517,267 samples, 0.57%)</title><rect x="457.2" y="277" width="6.8" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="460.24" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (723,168 samples, 0.80%)</title><rect x="596.2" y="117" width="9.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="599.22" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_M_insert_node (1,321,773 samples, 1.47%)</title><rect x="498.0" y="181" width="17.3" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="500.96" y="191.5" ></text>
</g>
<g >
<title>MyString::countWordsUsageIgnoringCases (12,380,379 samples, 13.74%)</title><rect x="498.0" y="245" width="162.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="500.96" y="255.5" >MyString::countWords..</text>
</g>
<g >
<title>__sanitizer::internal_clone (734,470 samples, 0.82%)</title><rect x="1091.7" y="469" width="9.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1094.65" y="479.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (686,422 samples, 0.76%)</title><rect x="623.6" y="85" width="9.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="626.64" y="95.5" ></text>
</g>
<g >
<title>main (23,728,926 samples, 26.33%)</title><rect x="457.2" y="453" width="310.8" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="460.24" y="463.5" >main</text>
</g>
<g >
<title>MyString::operator&lt; (2,747,064 samples, 3.05%)</title><rect x="524.1" y="197" width="36.0" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="527.14" y="207.5" >MyS..</text>
</g>
<g >
<title>MyString::countWordsUsageIgnoringCases (13,794,834 samples, 15.31%)</title><rect x="479.4" y="261" width="180.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="482.44" y="271.5" >MyString::countWordsUsa..</text>
</g>
<g >
<title>MyString::operator&lt; (637,022 samples, 0.71%)</title><rect x="739.8" y="229" width="8.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="742.80" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::lower_bound (7,633,646 samples, 8.47%)</title><rect x="560.1" y="197" width="100.0" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="563.11" y="207.5" >std::_Rb_tre..</text>
</g>
<g >
<title>strcmp (1,349,619 samples, 1.50%)</title><rect x="1172.3" y="469" width="17.7" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1175.33" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (677,896 samples, 0.75%)</title><rect x="515.3" y="133" width="8.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="518.27" y="143.5" ></text>
</g>
<g >
<title>testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (23,728,926 samples, 26.33%)</title><rect x="457.2" y="389" width="310.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="460.24" y="399.5" >testing::internal::HandleSehExceptionsInM..</text>
</g>
<g >
<title>__asan::CanPoisonMemory (723,027 samples, 0.80%)</title><rect x="17.6" y="421" width="9.5" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="20.64" y="431.5" ></text>
</g>
<g >
<title>ioctl_init (459,640 samples, 0.51%)</title><rect x="1166.3" y="469" width="6.0" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1169.31" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (699,748 samples, 0.78%)</title><rect x="641.4" y="133" width="9.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="644.39" y="143.5" ></text>
</g>
<g >
<title>testing::Test::Run (22,228,459 samples, 24.67%)</title><rect x="464.0" y="325" width="291.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="467.02" y="335.5" >testing::Test::Run</text>
</g>
<g >
<title>testing::internal::CmpHelperEQ&lt;int, unsigned long&gt; (530,884 samples, 0.59%)</title><rect x="748.1" y="245" width="7.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="751.14" y="255.5" ></text>
</g>
<g >
<title>testing::TestInfo::Run (22,228,459 samples, 24.67%)</title><rect x="464.0" y="341" width="291.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="467.02" y="351.5" >testing::TestInfo::Run</text>
</g>
<g >
<title>std::unique_ptr&lt;std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::default_delete&lt;std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~unique_ptr (461,266 samples, 0.51%)</title><rect x="774.0" y="373" width="6.0" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="777.00" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (628,774 samples, 0.70%)</title><rect x="715.8" y="133" width="8.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="718.79" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator[] (597,963 samples, 0.66%)</title><rect x="732.0" y="213" width="7.8" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="734.97" y="223.5" ></text>
</g>
<g >
<title>std::__stable_sort&lt;__gnu_cxx::__normal_iterator&lt;testing::TestInfo**, std::vector&lt;testing::TestInfo*, std::allocator&lt;testing::TestInfo*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;testing::TestSuite::Run (517,267 samples, 0.57%)</title><rect x="457.2" y="325" width="6.8" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="460.24" y="335.5" ></text>
</g>
<g >
<title>testing::UnitTest::Run (23,728,926 samples, 26.33%)</title><rect x="457.2" y="421" width="310.8" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="460.24" y="431.5" >testing::UnitTest::Run</text>
</g>
<g >
<title>__lsan::PointsIntoChunk (426,188 samples, 0.47%)</title><rect x="810.2" y="469" width="5.6" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="813.24" y="479.5" ></text>
</g>
<g >
<title>pthread_getspecific@@GLIBC_2.34 (678,132 samples, 0.75%)</title><rect x="126.4" y="437" width="8.9" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="129.42" y="447.5" ></text>
</g>
<g >
<title>MyString::countWordsUsageIgnoringCases (4,883,512 samples, 5.42%)</title><rect x="660.1" y="245" width="63.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="663.08" y="255.5" >MyStrin..</text>
</g>
<g >
<title>std::__stable_sort_adaptive&lt;__gnu_cxx::__normal_iterator&lt;testing::TestInfo**, std::vector&lt;testing::TestInfo*, std::allocator&lt;testing::TestInfo*&gt; &gt; &gt;, testing::TestInfo**, __gnu_cxx::__ops::_Iter_comp_iter&lt;testing::TestSuite::Run (517,267 samples, 0.57%)</title><rect x="457.2" y="309" width="6.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="460.24" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (727,307 samples, 0.81%)</title><rect x="650.6" y="117" width="9.5" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="653.55" y="127.5" ></text>
</g>
<g >
<title>testing::internal::FlagToEnvVar (461,266 samples, 0.51%)</title><rect x="774.0" y="405" width="6.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="777.00" y="415.5" ></text>
</g>
<g >
<title>MyString::base_iterator&lt;true&gt;::operator++ (659,384 samples, 0.73%)</title><rect x="587.6" y="117" width="8.6" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="590.59" y="127.5" ></text>
</g>
<g >
<title>MyString::operator[] (619,232 samples, 0.69%)</title><rect x="667.9" y="117" width="8.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="670.94" y="127.5" ></text>
</g>
<g >
<title>__libc_start_main@@GLIBC_2.34 (3,227,739 samples, 3.58%)</title><rect x="768.0" y="469" width="42.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="770.97" y="479.5" >__l..</text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_M_lower_bound (7,633,646 samples, 8.47%)</title><rect x="560.1" y="181" width="100.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="563.11" y="191.5" >std::_Rb_tre..</text>
</g>
<g >
<title>__tls_get_addr (600,415 samples, 0.67%)</title><rect x="684.0" y="101" width="7.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="687.02" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (500,734 samples, 0.56%)</title><rect x="761.4" y="293" width="6.6" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="764.41" y="303.5" ></text>
</g>
<g >
<title>testing::internal::UnitTestImpl::FilterTests (983,200 samples, 1.09%)</title><rect x="755.1" y="357" width="12.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="758.09" y="367.5" ></text>
</g>
<g >
<title>testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (22,228,459 samples, 24.67%)</title><rect x="464.0" y="309" width="291.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="467.02" y="319.5" >testing::internal::HandleExceptionsInMe..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (637,022 samples, 0.71%)</title><rect x="739.8" y="213" width="8.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="742.80" y="223.5" ></text>
</g>
<g >
<title>MyString::operator[] (708,397 samples, 0.79%)</title><rect x="578.3" y="101" width="9.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="581.31" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (609,147 samples, 0.68%)</title><rect x="676.0" y="117" width="8.0" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="679.04" y="127.5" ></text>
</g>
<g >
<title>std::less&lt;MyString&gt;::operator (7,633,646 samples, 8.47%)</title><rect x="560.1" y="165" width="100.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="563.11" y="175.5" >std::less&lt;My..</text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (727,307 samples, 0.81%)</title><rect x="650.6" y="133" width="9.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="653.55" y="143.5" ></text>
</g>
<g >
<title>std::map&lt;MyString, unsigned long, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::lower_bound (4,283,265 samples, 4.75%)</title><rect x="667.9" y="213" width="56.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="670.94" y="223.5" >std::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (628,774 samples, 0.70%)</title><rect x="715.8" y="85" width="8.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="718.79" y="95.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (671,626 samples, 0.75%)</title><rect x="506.5" y="85" width="8.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="509.47" y="95.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringstream (461,266 samples, 0.51%)</title><rect x="774.0" y="357" width="6.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="777.00" y="367.5" ></text>
</g>
<g >
<title>MyString::base_iterator&lt;false&gt;::operator* (693,532 samples, 0.77%)</title><rect x="488.9" y="245" width="9.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="491.88" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (460,737 samples, 0.51%)</title><rect x="780.0" y="357" width="6.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="783.04" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (460,737 samples, 0.51%)</title><rect x="780.0" y="325" width="6.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="783.04" y="335.5" ></text>
</g>
<g >
<title>MyString::toString[abi:cxx11] (3,654,491 samples, 4.06%)</title><rect x="667.9" y="133" width="47.9" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="670.94" y="143.5" >MySt..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (590,324 samples, 0.66%)</title><rect x="464.0" y="101" width="7.7" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="467.02" y="111.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (2,817,129 samples, 3.13%)</title><rect x="66.6" y="437" width="36.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="69.62" y="447.5" >__i..</text>
</g>
<g >
<title>__cos_ifunc (408,485 samples, 0.45%)</title><rect x="268.2" y="421" width="5.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="271.16" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;MyString const&amp;&gt;, std::tuple&lt;&gt; &gt; (600,247 samples, 0.67%)</title><rect x="660.1" y="213" width="7.8" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="663.08" y="223.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (530,884 samples, 0.59%)</title><rect x="748.1" y="229" width="7.0" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="751.14" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_M_lower_bound (4,283,265 samples, 4.75%)</title><rect x="667.9" y="181" width="56.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="670.94" y="191.5" >std::..</text>
</g>
<g >
<title>testing::TestSuite::AddTestInfo (460,595 samples, 0.51%)</title><rect x="768.0" y="405" width="6.0" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="770.97" y="415.5" ></text>
</g>
<g >
<title>MyString::operator&lt; (7,633,646 samples, 8.47%)</title><rect x="560.1" y="149" width="100.0" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="563.11" y="159.5" >MyString::op..</text>
</g>
<g >
<title>mmap64 (400,278 samples, 0.44%)</title><rect x="1152.2" y="453" width="5.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1155.17" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (460,737 samples, 0.51%)</title><rect x="780.0" y="309" width="6.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="783.04" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (590,324 samples, 0.66%)</title><rect x="464.0" y="149" width="7.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="467.02" y="159.5" ></text>
</g>
<g >
<title>testing::internal::UnitTestImpl::RunAllTests (23,728,926 samples, 26.33%)</title><rect x="457.2" y="373" width="310.8" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="460.24" y="383.5" >testing::internal::UnitTestImpl::RunAllTe..</text>
</g>
<g >
<title>tests (90,111,900 samples, 100.00%)</title><rect x="10.0" y="485" width="1180.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >tests</text>
</g>
<g >
<title>std::map&lt;MyString, unsigned long, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::operator[] (12,380,379 samples, 13.74%)</title><rect x="498.0" y="229" width="162.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="500.96" y="239.5" >std::map&lt;MyString, u..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (460,737 samples, 0.51%)</title><rect x="780.0" y="341" width="6.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="783.04" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (2,426,112 samples, 2.69%)</title><rect x="684.0" y="117" width="31.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="687.02" y="127.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (677,896 samples, 0.75%)</title><rect x="515.3" y="101" width="8.8" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="518.27" y="111.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (1,314,092 samples, 1.46%)</title><rect x="434.0" y="469" width="17.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="437.00" y="479.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to (637,022 samples, 0.71%)</title><rect x="739.8" y="149" width="8.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="742.80" y="159.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (644,183 samples, 0.71%)</title><rect x="259.7" y="453" width="8.5" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="262.72" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (2,056,701 samples, 2.28%)</title><rect x="605.7" y="117" width="26.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="608.69" y="127.5" >s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_M_construct_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;MyString const&amp;&gt;, std::tuple&lt;&gt; &gt; (600,247 samples, 0.67%)</title><rect x="660.1" y="165" width="7.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="663.08" y="175.5" ></text>
</g>
<g >
<title>__static_initialization_and_destruction_0 (460,595 samples, 0.51%)</title><rect x="768.0" y="437" width="6.0" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="770.97" y="447.5" ></text>
</g>
<g >
<title>GetInterceptorMetadata (583,269 samples, 0.65%)</title><rect x="10.0" y="469" width="7.6" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>MyString::operator&lt; (590,324 samples, 0.66%)</title><rect x="464.0" y="181" width="7.7" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="467.02" y="191.5" ></text>
</g>
<g >
<title>all (90,111,900 samples, 100%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>MyString::countWordsUsageIgnoringCases (6,088,271 samples, 6.76%)</title><rect x="660.1" y="261" width="79.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="663.08" y="271.5" >MyString:..</text>
</g>
<g >
<title>__sanitizer::internal_munmap (461,015 samples, 0.51%)</title><rect x="1132.4" y="469" width="6.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1135.42" y="479.5" ></text>
</g>
<g >
<title>testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (22,228,459 samples, 24.67%)</title><rect x="464.0" y="293" width="291.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="467.02" y="303.5" >testing::internal::HandleSehExceptionsI..</text>
</g>
<g >
<title>std::less&lt;MyString&gt;::operator (2,747,064 samples, 3.05%)</title><rect x="524.1" y="213" width="36.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="527.14" y="223.5" >std..</text>
</g>
<g >
<title>testing::internal::MakeAndRegisterTestInfo (460,595 samples, 0.51%)</title><rect x="768.0" y="421" width="6.0" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="770.97" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (590,324 samples, 0.66%)</title><rect x="464.0" y="85" width="7.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="467.02" y="95.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (671,626 samples, 0.75%)</title><rect x="506.5" y="117" width="8.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="509.47" y="127.5" ></text>
</g>
<g >
<title>MyStringTester_countingWordsNumbersInTextIgnoringWordCases_Test::TestBody (13,794,834 samples, 15.31%)</title><rect x="479.4" y="277" width="180.7" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="482.44" y="287.5" >MyStringTester_counting..</text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (6,052,739 samples, 6.72%)</title><rect x="1012.0" y="469" width="79.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1015.04" y="479.5" >__sanitiz..</text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_M_create_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;MyString const&amp;&gt;, std::tuple&lt;&gt; &gt; (600,247 samples, 0.67%)</title><rect x="660.1" y="181" width="7.8" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="663.08" y="191.5" ></text>
</g>
<g >
<title>__sanitizer::TracerThread (26,688 samples, 0.03%)</title><rect x="1091.3" y="469" width="0.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1094.30" y="479.5" ></text>
</g>
<g >
<title>testing::internal::EqHelper::Compare&lt;int, unsigned long,  (530,884 samples, 0.59%)</title><rect x="748.1" y="261" width="7.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="751.14" y="271.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I__ZN7testing15AssertionResultC2ERKS0_ (922,003 samples, 1.02%)</title><rect x="774.0" y="453" width="12.1" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="777.00" y="463.5" ></text>
</g>
<g >
<title>_Unwind_Find_FDE (567,826 samples, 0.63%)</title><rect x="135.3" y="453" width="7.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="138.30" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (637,022 samples, 0.71%)</title><rect x="739.8" y="197" width="8.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="742.80" y="207.5" ></text>
</g>
<g >
<title>testing::Message::GetString[abi:cxx11] (460,737 samples, 0.51%)</title><rect x="780.0" y="389" width="6.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="783.04" y="399.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (1,056,596 samples, 1.17%)</title><rect x="378.7" y="469" width="13.8" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="381.70" y="479.5" ></text>
</g>
<g >
<title>testing::TestSuite::Run (22,745,726 samples, 25.24%)</title><rect x="457.2" y="357" width="297.9" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="460.24" y="367.5" >testing::TestSuite::Run</text>
</g>
<g >
<title>[unknown] (573,903 samples, 0.64%)</title><rect x="371.2" y="437" width="7.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="374.19" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, MyString, std::_Identity&lt;MyString&gt;, std::less&lt;MyString&gt;, std::allocator&lt;MyString&gt; &gt;::_M_insert_unique&lt;MyString const&amp;&gt; (590,324 samples, 0.66%)</title><rect x="464.0" y="229" width="7.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="467.02" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (2,076,815 samples, 2.30%)</title><rect x="532.9" y="149" width="27.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="535.92" y="159.5" >s..</text>
</g>
<g >
<title>[unknown] (600,247 samples, 0.67%)</title><rect x="660.1" y="133" width="7.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="663.08" y="143.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (422,267 samples, 0.47%)</title><rect x="120.9" y="437" width="5.5" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="123.89" y="447.5" ></text>
</g>
<g >
<title>MyString::operator&lt; (677,896 samples, 0.75%)</title><rect x="515.3" y="165" width="8.8" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="518.27" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (628,774 samples, 0.70%)</title><rect x="715.8" y="101" width="8.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="718.79" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (2,076,815 samples, 2.30%)</title><rect x="532.9" y="165" width="27.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="535.92" y="175.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (671,626 samples, 0.75%)</title><rect x="506.5" y="69" width="8.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="509.47" y="79.5" ></text>
</g>
<g >
<title>get_common_indices.constprop.0 (190,154 samples, 0.21%)</title><rect x="1163.8" y="469" width="2.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1166.82" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (671,626 samples, 0.75%)</title><rect x="506.5" y="53" width="8.8" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="509.47" y="63.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, MyString, std::_Identity&lt;MyString&gt;, std::less&lt;MyString&gt;, std::allocator&lt;MyString&gt; &gt;::_M_get_insert_unique_pos (590,324 samples, 0.66%)</title><rect x="464.0" y="213" width="7.7" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="467.02" y="223.5" ></text>
</g>
<g >
<title>__sanitizer::internal_close (754,385 samples, 0.84%)</title><rect x="1101.3" y="469" width="9.8" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1104.27" y="479.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::assign (1,351,811 samples, 1.50%)</title><rect x="542.4" y="133" width="17.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="545.41" y="143.5" ></text>
</g>
<g >
<title>MyString::operator&lt; (671,626 samples, 0.75%)</title><rect x="506.5" y="149" width="8.8" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="509.47" y="159.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (3,166,312 samples, 3.51%)</title><rect x="392.5" y="469" width="41.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="395.54" y="479.5" >__a..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (723,168 samples, 0.80%)</title><rect x="596.2" y="101" width="9.5" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="599.22" y="111.5" ></text>
</g>
<g >
<title>MyString::toString[abi:cxx11] (671,626 samples, 0.75%)</title><rect x="506.5" y="133" width="8.8" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="509.47" y="143.5" ></text>
</g>
<g >
<title>__sanitizer::internal_open (456,869 samples, 0.51%)</title><rect x="247.7" y="453" width="6.0" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="250.70" y="463.5" ></text>
</g>
<g >
<title>printf_common (552,145 samples, 0.61%)</title><rect x="168.0" y="437" width="7.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="171.02" y="447.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to (671,626 samples, 0.75%)</title><rect x="506.5" y="37" width="8.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="509.47" y="47.5" ></text>
</g>
<g >
<title>testing::internal::(anonymous namespace)::PositiveAndNegativeUnitTestFilter::MatchesTest (482,466 samples, 0.54%)</title><rect x="755.1" y="341" width="6.3" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="758.09" y="351.5" ></text>
</g>
<g >
<title>[unknown] (723,027 samples, 0.80%)</title><rect x="17.6" y="437" width="9.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="20.64" y="447.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt;::PopulateFreeList (2,760,186 samples, 3.06%)</title><rect x="975.9" y="469" width="36.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="978.90" y="479.5" >__s..</text>
</g>
<g >
<title>do_lookup_x (459,034 samples, 0.51%)</title><rect x="360.2" y="453" width="6.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="363.17" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_Auto_node::_Auto_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;MyString const&amp;&gt;, std::tuple&lt;&gt; &gt; (600,247 samples, 0.67%)</title><rect x="660.1" y="197" width="7.8" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="663.08" y="207.5" ></text>
</g>
<g >
<title>std::less&lt;MyString&gt;::operator (677,896 samples, 0.75%)</title><rect x="515.3" y="181" width="8.8" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="518.27" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (677,896 samples, 0.75%)</title><rect x="515.3" y="197" width="8.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="518.27" y="207.5" ></text>
</g>
<g >
<title>__sanitizer::LowLevelAllocator::Allocate (460,923 samples, 0.51%)</title><rect x="804.2" y="437" width="6.0" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="807.20" y="447.5" ></text>
</g>
<g >
<title>_start (73,677 samples, 0.08%)</title><rect x="1157.4" y="469" width="1.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1160.41" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (460,737 samples, 0.51%)</title><rect x="780.0" y="293" width="6.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="783.04" y="303.5" ></text>
</g>
<g >
<title>__sanitizer::internal_read (461,015 samples, 0.51%)</title><rect x="253.7" y="453" width="6.0" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="256.69" y="463.5" ></text>
</g>
<g >
<title>MyString::getUniqueWords (1,177,448 samples, 1.31%)</title><rect x="464.0" y="261" width="15.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="467.02" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (669,177 samples, 0.74%)</title><rect x="632.6" y="133" width="8.8" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="635.63" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::base (500,734 samples, 0.56%)</title><rect x="761.4" y="277" width="6.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="764.41" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (608,713 samples, 0.68%)</title><rect x="699.8" y="85" width="8.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="702.84" y="95.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (677,896 samples, 0.75%)</title><rect x="515.3" y="117" width="8.8" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="518.27" y="127.5" ></text>
</g>
<g >
<title>std::less&lt;MyString&gt;::operator (590,324 samples, 0.66%)</title><rect x="464.0" y="197" width="7.7" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="467.02" y="207.5" ></text>
</g>
<g >
<title>std::map&lt;MyString, unsigned long, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::at (637,022 samples, 0.71%)</title><rect x="739.8" y="261" width="8.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="742.80" y="271.5" ></text>
</g>
<g >
<title>MyString::base_iterator&lt;true&gt;::operator* (708,397 samples, 0.79%)</title><rect x="578.3" y="117" width="9.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="581.31" y="127.5" ></text>
</g>
<g >
<title>std::any_of&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, testing::internal::(anonymous namespace)::UnitTestFilter::MatchesName (500,734 samples, 0.56%)</title><rect x="761.4" y="325" width="6.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="764.41" y="335.5" ></text>
</g>
<g >
<title>do_lookup_x (415,390 samples, 0.46%)</title><rect x="1158.4" y="469" width="5.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1161.38" y="479.5" ></text>
</g>
<g >
<title>testing::internal::StringStreamToString (460,737 samples, 0.51%)</title><rect x="780.0" y="373" width="6.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="783.04" y="383.5" ></text>
</g>
<g >
<title>MyString::toString[abi:cxx11] (590,324 samples, 0.66%)</title><rect x="464.0" y="165" width="7.7" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="467.02" y="175.5" ></text>
</g>
<g >
<title>std::__addressof&lt;char&gt; (609,147 samples, 0.68%)</title><rect x="676.0" y="53" width="8.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="679.04" y="63.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::assign (723,168 samples, 0.80%)</title><rect x="596.2" y="85" width="9.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="599.22" y="95.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (628,774 samples, 0.70%)</title><rect x="715.8" y="117" width="8.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="718.79" y="127.5" ></text>
</g>
<g >
<title>__interceptor_vprintf (552,145 samples, 0.61%)</title><rect x="168.0" y="453" width="7.3" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="171.02" y="463.5" ></text>
</g>
<g >
<title>MyString::operator+= (606,796 samples, 0.67%)</title><rect x="724.0" y="245" width="8.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="727.02" y="255.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;::operator (650,147 samples, 0.72%)</title><rect x="498.0" y="149" width="8.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="500.96" y="159.5" ></text>
</g>
<g >
<title>_dl_relocate_object (6,189,306 samples, 6.87%)</title><rect x="279.1" y="421" width="81.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="282.12" y="431.5" >_dl_reloc..</text>
</g>
<g >
<title>std::__addressof&lt;char const&gt; (637,022 samples, 0.71%)</title><rect x="739.8" y="133" width="8.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="742.80" y="143.5" ></text>
</g>
<g >
<title>std::less&lt;MyString&gt;::operator (4,283,265 samples, 4.75%)</title><rect x="667.9" y="165" width="56.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="670.94" y="175.5" >std::..</text>
</g>
<g >
<title>__static_initialization_and_destruction_0 (922,003 samples, 1.02%)</title><rect x="774.0" y="437" width="12.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="777.00" y="447.5" ></text>
</g>
<g >
<title>std::less&lt;MyString&gt;::operator (671,626 samples, 0.75%)</title><rect x="506.5" y="165" width="8.8" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="509.47" y="175.5" ></text>
</g>
<g >
<title>__tls_get_addr (655,127 samples, 0.73%)</title><rect x="615.1" y="101" width="8.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="618.06" y="111.5" ></text>
</g>
<g >
<title>_dl_map_object (731,540 samples, 0.81%)</title><rect x="1147.8" y="469" width="9.6" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1150.83" y="479.5" ></text>
</g>
<g >
<title>__sched_yield (716,071 samples, 0.79%)</title><rect x="1138.5" y="469" width="9.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1141.46" y="479.5" ></text>
</g>
<g >
<title>std::map&lt;MyString, unsigned long, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::operator[] (4,883,512 samples, 5.42%)</title><rect x="660.1" y="229" width="63.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="663.08" y="239.5" >std::ma..</text>
</g>
<g >
<title>__sanitizer::internal_memcpy (1,140,133 samples, 1.27%)</title><rect x="232.8" y="453" width="14.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="235.78" y="463.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (7,026,350 samples, 7.80%)</title><rect x="268.2" y="453" width="92.0" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="271.16" y="463.5" >_dl_sysdep..</text>
</g>
<g >
<title>MyString::base_iterator&lt;false&gt;::operator* (597,963 samples, 0.66%)</title><rect x="732.0" y="229" width="7.8" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="734.97" y="239.5" ></text>
</g>
<g >
<title>__lsan::ProcessGlobalRegionsCallback (645,431 samples, 0.72%)</title><rect x="815.8" y="469" width="8.5" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="818.82" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (573,903 samples, 0.64%)</title><rect x="371.2" y="453" width="7.5" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="374.19" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::lower_bound (4,283,265 samples, 4.75%)</title><rect x="667.9" y="197" width="56.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="670.94" y="207.5" >std::..</text>
</g>
<g >
<title>dl_main (7,026,350 samples, 7.80%)</title><rect x="268.2" y="437" width="92.0" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="271.16" y="447.5" >dl_main</text>
</g>
<g >
<title>[unknown] (27,573,033 samples, 30.60%)</title><rect x="17.6" y="469" width="361.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="20.64" y="479.5" >[unknown]</text>
</g>
<g >
<title>std::addressof&lt;char&gt; (609,147 samples, 0.68%)</title><rect x="676.0" y="69" width="8.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="679.04" y="79.5" ></text>
</g>
<g >
<title>std::none_of&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, testing::internal::(anonymous namespace)::UnitTestFilter::MatchesName (500,734 samples, 0.56%)</title><rect x="761.4" y="309" width="6.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="764.41" y="319.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (1,209,878 samples, 1.34%)</title><rect x="152.2" y="453" width="15.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="155.18" y="463.5" ></text>
</g>
<g >
<title>MyString::toString[abi:cxx11] (2,747,064 samples, 3.05%)</title><rect x="524.1" y="181" width="36.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="527.14" y="191.5" >MyS..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (671,626 samples, 0.75%)</title><rect x="506.5" y="101" width="8.8" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="509.47" y="111.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::assign (609,476 samples, 0.68%)</title><rect x="707.8" y="85" width="8.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="710.81" y="95.5" ></text>
</g>
<g >
<title>__sanitizer::internal_mmap (253,595 samples, 0.28%)</title><rect x="1129.1" y="469" width="3.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1132.10" y="479.5" ></text>
</g>
<g >
<title>memmove (382,365 samples, 0.42%)</title><rect x="366.2" y="453" width="5.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="369.18" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_const_iterator&lt;MyString&gt;, bool&gt;::pair&lt;std::_Rb_tree_iterator&lt;MyString&gt;&amp;, bool&amp;&gt; (587,124 samples, 0.65%)</title><rect x="471.7" y="229" width="7.7" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="474.75" y="239.5" ></text>
</g>
<g >
<title>MyString::toLower (597,963 samples, 0.66%)</title><rect x="732.0" y="245" width="7.8" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="734.97" y="255.5" ></text>
</g>
<g >
<title>MyStringTester_emptyStringConstruction_expectedSizeIsZero_Test::TestBody (530,884 samples, 0.59%)</title><rect x="748.1" y="277" width="7.0" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="751.14" y="287.5" ></text>
</g>
<g >
<title>std::stable_sort&lt;__gnu_cxx::__normal_iterator&lt;testing::TestInfo**, std::vector&lt;testing::TestInfo*, std::allocator&lt;testing::TestInfo*&gt; &gt; &gt;, testing::TestSuite::Run (517,267 samples, 0.57%)</title><rect x="457.2" y="341" width="6.8" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="460.24" y="351.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2,455,388 samples, 2.72%)</title><rect x="200.6" y="453" width="32.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="203.62" y="463.5" >__..</text>
</g>
<g >
<title>__asan::GetCurrentThread (607,372 samples, 0.67%)</title><rect x="27.1" y="437" width="8.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="30.11" y="447.5" ></text>
</g>
<g >
<title>MyString::toString[abi:cxx11] (677,896 samples, 0.75%)</title><rect x="515.3" y="149" width="8.8" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="518.27" y="159.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (461,211 samples, 0.51%)</title><rect x="798.2" y="437" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="801.16" y="447.5" ></text>
</g>
<g >
<title>MyStringTester_countingWordsNumbersInText_Test::TestBody (6,725,293 samples, 7.46%)</title><rect x="660.1" y="277" width="88.0" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="663.08" y="287.5" >MyStringTe..</text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;MyString const, unsigned long&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;MyString const&amp;&gt;, std::tuple&lt;&gt; &gt; (600,247 samples, 0.67%)</title><rect x="660.1" y="149" width="7.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="663.08" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_S_key (650,147 samples, 0.72%)</title><rect x="498.0" y="165" width="8.5" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="500.96" y="175.5" ></text>
</g>
<g >
<title>RUN_ALL_TESTS (23,728,926 samples, 26.33%)</title><rect x="457.2" y="437" width="310.8" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="460.24" y="447.5" >RUN_ALL_TESTS</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (590,324 samples, 0.66%)</title><rect x="464.0" y="117" width="7.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="467.02" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (699,748 samples, 0.78%)</title><rect x="641.4" y="117" width="9.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="644.39" y="127.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (428,559 samples, 0.48%)</title><rect x="273.5" y="421" width="5.6" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="276.51" y="431.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (2,410,149 samples, 2.67%)</title><rect x="35.1" y="437" width="31.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="38.06" y="447.5" >__..</text>
</g>
<g >
<title>__asan_register_globals.part.0 (923,007 samples, 1.02%)</title><rect x="786.1" y="437" width="12.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="789.07" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (609,147 samples, 0.68%)</title><rect x="676.0" y="101" width="8.0" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="679.04" y="111.5" ></text>
</g>
<g >
<title>__sanitizer::DTLS_on_tls_get_addr (1,327,378 samples, 1.47%)</title><rect x="103.5" y="437" width="17.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="106.51" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (1,825,697 samples, 2.03%)</title><rect x="691.9" y="101" width="23.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="694.88" y="111.5" >s..</text>
</g>
<g >
<title>__asan::asan_delete (721,268 samples, 0.80%)</title><rect x="142.7" y="453" width="9.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="145.74" y="463.5" ></text>
</g>
<g >
<title>__lsan::LsanMetadata::LsanMetadata (239,663 samples, 0.27%)</title><rect x="197.5" y="453" width="3.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="200.48" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (590,324 samples, 0.66%)</title><rect x="464.0" y="133" width="7.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="467.02" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (686,422 samples, 0.76%)</title><rect x="623.6" y="101" width="9.0" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="626.64" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (482,466 samples, 0.54%)</title><rect x="755.1" y="309" width="6.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="758.09" y="319.5" ></text>
</g>
<g >
<title>__cpu_indicator_init (460,866 samples, 0.51%)</title><rect x="451.2" y="469" width="6.0" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="454.21" y="479.5" ></text>
</g>
<g >
<title>testing::Message::~Message (461,266 samples, 0.51%)</title><rect x="774.0" y="389" width="6.0" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="777.00" y="399.5" ></text>
</g>
<g >
<title>__GI___open64_nocancel (331,262 samples, 0.37%)</title><rect x="1147.8" y="453" width="4.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1150.83" y="463.5" ></text>
</g>
<g >
<title>_dl_runtime_resolve_xsave (573,903 samples, 0.64%)</title><rect x="371.2" y="421" width="7.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="374.19" y="431.5" ></text>
</g>
<g >
<title>MyString::toString[abi:cxx11] (5,537,414 samples, 6.15%)</title><rect x="560.1" y="133" width="72.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="563.11" y="143.5" >MyString..</text>
</g>
<g >
<title>MyString::operator&lt; (4,283,265 samples, 4.75%)</title><rect x="667.9" y="149" width="56.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="670.94" y="159.5" >MyStr..</text>
</g>
<g >
<title>_GLOBAL__sub_I__ZN62MyStringTester_emptyStringConstruction_expectedSizeIsZero_Test10test_info_E (460,595 samples, 0.51%)</title><rect x="768.0" y="453" width="6.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="770.97" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_Auto_node::_M_insert (1,321,773 samples, 1.47%)</title><rect x="498.0" y="197" width="17.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="500.96" y="207.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (600,247 samples, 0.67%)</title><rect x="660.1" y="117" width="7.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="663.08" y="127.5" ></text>
</g>
<g >
<title>__lsan::ScanRangeForPointers (11,118,591 samples, 12.34%)</title><rect x="824.3" y="469" width="145.6" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="827.27" y="479.5" >__lsan::ScanRangeF..</text>
</g>
<g >
<title>std::_Rb_tree&lt;MyString, std::pair&lt;MyString const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;MyString const, unsigned long&gt; &gt;, std::less&lt;MyString&gt;, std::allocator&lt;std::pair&lt;MyString const, unsigned long&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;MyString const&amp;&gt;, std::tuple&lt;&gt; &gt; (1,999,669 samples, 2.22%)</title><rect x="498.0" y="213" width="26.1" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="500.96" y="223.5" >s..</text>
</g>
<g >
<title>[unknown] (8,985,454 samples, 9.97%)</title><rect x="17.6" y="453" width="117.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="20.64" y="463.5" >[unknown]</text>
</g>
<g >
<title>std::less&lt;MyString&gt;::operator (637,022 samples, 0.71%)</title><rect x="739.8" y="245" width="8.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="742.80" y="255.5" ></text>
</g>
<g >
<title>testing::internal::(anonymous namespace)::UnitTestFilter::MatchesName (500,734 samples, 0.56%)</title><rect x="761.4" y="341" width="6.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="764.41" y="351.5" ></text>
</g>
<g >
<title>std::set&lt;MyString, std::less&lt;MyString&gt;, std::allocator&lt;MyString&gt; &gt;::insert (1,177,448 samples, 1.31%)</title><rect x="464.0" y="245" width="15.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="467.02" y="255.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char*, char, false&gt;::pointer_to (609,147 samples, 0.68%)</title><rect x="676.0" y="85" width="8.0" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="679.04" y="95.5" ></text>
</g>
<g >
<title>__libc_start_call_main (23,728,926 samples, 26.33%)</title><rect x="457.2" y="469" width="310.8" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="460.24" y="479.5" >__libc_start_call_main</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (637,022 samples, 0.71%)</title><rect x="739.8" y="165" width="8.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="742.80" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (699,748 samples, 0.78%)</title><rect x="641.4" y="101" width="9.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="644.39" y="111.5" ></text>
</g>
<g >
<title>testing::internal::BoolFromGTestEnv (461,266 samples, 0.51%)</title><rect x="774.0" y="421" width="6.0" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="777.00" y="431.5" ></text>
</g>
<g >
<title>_sub_I_00099_1 (1,845,141 samples, 2.05%)</title><rect x="786.1" y="453" width="24.1" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="789.07" y="463.5" >_..</text>
</g>
<g >
<title>testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (23,728,926 samples, 26.33%)</title><rect x="457.2" y="405" width="310.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="460.24" y="415.5" >testing::internal::HandleExceptionsInMeth..</text>
</g>
<g >
<title>MyString::base_iterator&lt;true&gt;::operator* (670,249 samples, 0.74%)</title><rect x="524.1" y="165" width="8.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="527.14" y="175.5" ></text>
</g>
<g >
<title>testing::internal::StringFromGTestEnv (460,737 samples, 0.51%)</title><rect x="780.0" y="421" width="6.1" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="783.04" y="431.5" ></text>
</g>
<g >
<title>testing::internal::FlagToEnvVar (460,737 samples, 0.51%)</title><rect x="780.0" y="405" width="6.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="783.04" y="415.5" ></text>
</g>
</g>
</svg>
